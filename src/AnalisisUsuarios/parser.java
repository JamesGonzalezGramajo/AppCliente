
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalisisUsuarios;

import gui.Frames.VentanaIniciarSesion;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\012\003\000\002\012" +
    "\004\000\002\013\013\000\002\014\012\000\002\015\012" +
    "\000\002\002\003\000\002\003\003\000\002\004\003\000" +
    "\002\005\003\000\002\006\003\000\002\007\003\000\002" +
    "\010\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\004\004\005\001\002\000\004\007\012\001" +
    "\002\000\012\006\ufffb\007\ufffb\010\ufffb\011\ufffb\001\002" +
    "\000\006\002\000\004\000\001\002\000\006\002\011\004" +
    "\005\001\002\000\006\002\uffff\004\uffff\001\002\000\004" +
    "\002\001\001\002\000\004\005\ufff8\001\002\000\004\005" +
    "\015\001\002\000\004\004\005\001\002\000\012\002\ufffa" +
    "\004\ufffa\012\ufffa\013\ufffa\001\002\000\004\010\041\001" +
    "\002\000\004\004\005\001\002\000\004\011\027\001\002" +
    "\000\004\004\005\001\002\000\004\006\023\001\002\000" +
    "\010\007\ufff9\010\ufff9\011\ufff9\001\002\000\004\007\012" +
    "\001\002\000\004\005\015\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\005\ufff6\001\002\000\004\005\015" +
    "\001\002\000\004\013\033\001\002\000\004\004\005\001" +
    "\002\000\004\004\ufff4\001\002\000\004\006\023\001\002" +
    "\000\004\011\027\001\002\000\004\005\015\001\002\000" +
    "\004\004\ufffc\001\002\000\004\005\015\001\002\000\004" +
    "\005\ufff7\001\002\000\004\012\043\001\002\000\004\004" +
    "\ufff5\001\002\000\004\004\005\001\002\000\004\006\023" +
    "\001\002\000\004\010\041\001\002\000\004\005\015\001" +
    "\002\000\004\004\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\010\002\003\012\006\013\005\001\001\000" +
    "\004\005\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\003\013\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\013\001\001" +
    "\000\006\002\015\014\016\001\001\000\002\001\001\000" +
    "\004\006\037\001\001\000\006\002\017\015\020\001\001" +
    "\000\004\007\027\001\001\000\004\002\021\001\001\000" +
    "\004\004\023\001\001\000\002\001\001\000\004\005\024" +
    "\001\001\000\004\003\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\030\001\001\000\004\011\031" +
    "\001\001\000\004\002\033\001\001\000\002\001\001\000" +
    "\004\004\034\001\001\000\004\007\035\001\001\000\004" +
    "\003\036\001\001\000\002\001\001\000\004\003\041\001" +
    "\001\000\002\001\001\000\004\010\043\001\001\000\002" +
    "\001\001\000\004\002\044\001\001\000\004\004\045\001" +
    "\001\000\004\006\046\001\001\000\004\003\047\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




;


VentanaIniciarSesion ventana;


    public parser(usuarioLexer lexer, VentanaIniciarSesion ventana) {
		super(lexer);
        this.ventana = ventana;
	}


    public void syntax_error(Symbol cur_token) {
            System.out.println("Error sobrecargado <" + cur_token.value + "> || "   
            + cur_token.sym+" \n");
            //ventana.agregarTexto("     *** ERROR: Comando invalido ***");
            //ventana.agregarTexto("     *** Componente:  \"" + cur_token.value + "\" no reconocido");  
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente: " + s.value + 
        " no reconocido.\n");
        
    }  

    

        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= usuario 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= inicio usuario 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // usuario ::= MenorQ Usuario MayorQ nombre contrasenia MenorQ Diagonal Usuario MayorQ 
            {
              String RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String pas = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("Nombre: " + nom + "     Contrasenia: " + pas); ventana.enlistarUsuarios(nom,pas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usuario",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nombre ::= MenorQ Nombre MayorQ Identificador MenorQ Diagonal Nombre MayorQ 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contrasenia ::= MenorQ Contrasenia MayorQ Password MenorQ Diagonal Contrasenia MayorQ 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT=p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contrasenia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MenorQ ::= MENOR_Q 
            {
              String RESULT =null;
		int meqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String meq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = meq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MenorQ",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MayorQ ::= MAYOR_Q 
            {
              String RESULT =null;
		int maqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String maq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = maq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MayorQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Diagonal ::= DIAGONAL 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Diagonal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Usuario ::= USUARIO 
            {
              String RESULT =null;
		int usrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int usrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String usr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = usr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Usuario",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Nombre ::= NOMBRE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Nombre",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Contrasenia ::= CONTRASENIA 
            {
              String RESULT =null;
		int ctrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ctr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ctr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Contrasenia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Identificador ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identificador",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Password ::= PASSWORD 
            {
              String RESULT =null;
		int passleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int passright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pass = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pass; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Password",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
