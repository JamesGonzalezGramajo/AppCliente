/* The following code was generated by JFlex 1.6.1 */

/* codigo de usuario */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>prueba.flex</tt>
 */
class pruebaLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\12\1\13\1\0\2\12\16\10\4\0\1\14\1\0\1\4"+
    "\1\0\1\10\10\0\1\10\1\0\1\3\12\10\2\0\1\1\1\5"+
    "\1\2\2\0\1\15\1\25\1\35\1\57\1\41\1\60\1\56\1\61"+
    "\1\23\1\64\1\10\1\53\1\43\1\37\1\31\1\45\1\47\1\21"+
    "\1\33\1\17\1\27\1\51\1\55\1\62\1\10\1\63\1\6\1\0"+
    "\1\7\1\0\1\11\1\0\1\16\1\26\1\36\1\10\1\42\3\10"+
    "\1\24\2\10\1\54\1\44\1\40\1\32\1\46\1\50\1\22\1\34"+
    "\1\20\1\30\1\52\4\10\4\0\41\10\2\0\4\10\4\0\1\10"+
    "\2\0\1\10\7\0\1\10\4\0\1\10\5\0\27\10\1\0\37\10"+
    "\1\0\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10"+
    "\21\0\165\10\1\0\2\10\2\0\4\10\10\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\0\24\10\1\0\123\10\1\0\213\10\1\0\5\10"+
    "\2\0\236\10\11\0\46\10\2\0\1\10\7\0\47\10\7\0\1\10"+
    "\1\0\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10"+
    "\10\0\33\10\5\0\3\10\15\0\5\10\6\0\1\10\4\0\13\10"+
    "\5\0\112\10\4\0\146\10\1\0\11\10\1\0\12\10\1\0\23\10"+
    "\2\0\1\10\17\0\74\10\2\0\145\10\16\0\66\10\4\0\1\10"+
    "\5\0\56\10\22\0\34\10\104\0\1\10\1\0\13\10\67\0\33\10"+
    "\1\0\144\10\2\0\12\10\1\0\7\10\1\0\7\10\1\0\3\10"+
    "\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10"+
    "\3\0\4\10\2\0\11\10\2\0\2\10\2\0\4\10\10\0\1\10"+
    "\4\0\2\10\1\0\5\10\2\0\16\10\7\0\1\10\5\0\3\10"+
    "\1\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\2\10\1\0\2\10\2\0\1\10\1\0\5\10\4\0\2\10"+
    "\2\0\3\10\3\0\1\10\7\0\4\10\1\0\1\10\7\0\20\10"+
    "\13\0\3\10\1\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\5\10\2\0\12\10\1\0\3\10\1\0\3\10"+
    "\2\0\1\10\17\0\4\10\2\0\12\10\1\0\1\10\17\0\3\10"+
    "\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\2\0\11\10\2\0\2\10\2\0\3\10\10\0\2\10"+
    "\4\0\2\10\1\0\5\10\2\0\12\10\1\0\1\10\20\0\2\10"+
    "\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10"+
    "\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10\4\0\5\10"+
    "\3\0\3\10\1\0\4\10\2\0\1\10\6\0\1\10\16\0\12\10"+
    "\11\0\1\10\7\0\3\10\1\0\10\10\1\0\3\10\1\0\27\10"+
    "\1\0\12\10\1\0\5\10\3\0\10\10\1\0\3\10\1\0\4\10"+
    "\7\0\2\10\1\0\2\10\6\0\4\10\2\0\12\10\22\0\2\10"+
    "\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10"+
    "\2\0\11\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\10"+
    "\1\0\4\10\2\0\12\10\1\0\2\10\17\0\2\10\1\0\10\10"+
    "\1\0\3\10\1\0\51\10\2\0\10\10\1\0\3\10\1\0\5\10"+
    "\10\0\1\10\10\0\4\10\2\0\12\10\12\0\6\10\2\0\2\10"+
    "\1\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10"+
    "\3\0\1\10\4\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10"+
    "\15\0\72\10\4\0\20\10\1\0\12\10\47\0\2\10\1\0\1\10"+
    "\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10"+
    "\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0\15\10"+
    "\1\0\3\10\2\0\5\10\1\0\1\10\1\0\6\10\2\0\12\10"+
    "\2\0\4\10\40\0\1\10\27\0\2\10\6\0\12\10\13\0\1\10"+
    "\1\0\1\10\1\0\1\10\4\0\12\10\1\0\44\10\4\0\24\10"+
    "\1\0\22\10\1\0\44\10\11\0\1\10\71\0\112\10\6\0\116\10"+
    "\2\0\46\10\1\0\1\10\5\0\1\10\2\0\53\10\1\0\u014d\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\51\10"+
    "\1\0\4\10\2\0\41\10\1\0\4\10\2\0\7\10\1\0\1\10"+
    "\1\0\4\10\2\0\17\10\1\0\71\10\1\0\4\10\2\0\103\10"+
    "\2\0\3\10\40\0\20\10\20\0\125\10\14\0\u026c\10\2\0\21\10"+
    "\1\0\32\10\5\0\113\10\3\0\3\10\17\0\15\10\1\0\7\10"+
    "\13\0\25\10\13\0\24\10\14\0\15\10\1\0\3\10\1\0\2\10"+
    "\14\0\124\10\3\0\1\10\3\0\3\10\2\0\12\10\41\0\3\10"+
    "\2\0\12\10\6\0\130\10\10\0\53\10\5\0\106\10\12\0\35\10"+
    "\3\0\14\10\4\0\14\10\12\0\50\10\2\0\5\10\13\0\54\10"+
    "\4\0\32\10\6\0\12\10\46\0\34\10\4\0\77\10\1\0\35\10"+
    "\2\0\13\10\6\0\12\10\15\0\1\10\130\0\114\10\4\0\12\10"+
    "\21\0\11\10\14\0\164\10\14\0\70\10\10\0\12\10\3\0\61\10"+
    "\122\0\3\10\1\0\43\10\11\0\347\10\25\0\u011a\10\2\0\6\10"+
    "\2\0\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10"+
    "\3\0\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10"+
    "\5\0\3\10\1\0\7\10\16\0\5\10\32\0\5\10\20\0\2\10"+
    "\23\0\1\10\13\0\5\10\5\0\6\10\1\0\1\10\15\0\1\10"+
    "\20\0\15\10\3\0\33\10\25\0\15\10\4\0\1\10\3\0\14\10"+
    "\21\0\1\10\4\0\1\10\2\0\12\10\1\0\1\10\3\0\5\10"+
    "\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10"+
    "\2\0\4\10\5\0\5\10\4\0\1\10\21\0\51\10\u0a77\0\57\10"+
    "\1\0\57\10\1\0\205\10\6\0\11\10\14\0\46\10\1\0\1\10"+
    "\5\0\1\10\2\0\70\10\7\0\1\10\17\0\30\10\11\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\40\10\57\0\1\10\u01d5\0\3\10"+
    "\31\0\17\10\1\0\5\10\2\0\5\10\4\0\126\10\2\0\2\10"+
    "\2\0\3\10\1\0\132\10\1\0\4\10\5\0\51\10\3\0\136\10"+
    "\21\0\33\10\65\0\20\10\u0200\0\u19b6\10\112\0\u51cd\10\63\0\u048d\10"+
    "\103\0\56\10\2\0\u010d\10\3\0\34\10\24\0\60\10\4\0\12\10"+
    "\1\0\31\10\7\0\123\10\45\0\11\10\2\0\147\10\2\0\4\10"+
    "\1\0\4\10\14\0\13\10\115\0\60\10\20\0\1\10\7\0\64\10"+
    "\14\0\105\10\13\0\12\10\6\0\30\10\3\0\1\10\4\0\56\10"+
    "\2\0\44\10\14\0\35\10\3\0\101\10\16\0\13\10\46\0\67\10"+
    "\11\0\16\10\2\0\12\10\6\0\27\10\3\0\2\10\4\0\103\10"+
    "\30\0\3\10\2\0\20\10\2\0\5\10\12\0\6\10\2\0\6\10"+
    "\2\0\6\10\11\0\7\10\1\0\7\10\221\0\53\10\1\0\2\10"+
    "\2\0\12\10\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u016e\10"+
    "\2\0\152\10\46\0\7\10\14\0\5\10\5\0\14\10\1\0\15\10"+
    "\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10"+
    "\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\15\10\3\0\20\10"+
    "\20\0\7\10\14\0\2\10\30\0\3\10\31\0\1\10\6\0\5\10"+
    "\1\0\207\10\2\0\1\10\4\0\1\10\13\0\12\10\7\0\32\10"+
    "\4\0\1\10\1\0\32\10\13\0\131\10\3\0\6\10\2\0\6\10"+
    "\2\0\6\10\2\0\3\10\3\0\2\10\3\0\2\10\22\0\3\10"+
    "\4\0\14\10\1\0\32\10\1\0\23\10\1\0\2\10\1\0\17\10"+
    "\2\0\16\10\42\0\173\10\105\0\65\10\210\0\1\10\202\0\35\10"+
    "\3\0\61\10\57\0\37\10\21\0\33\10\65\0\36\10\2\0\44\10"+
    "\4\0\10\10\1\0\5\10\52\0\236\10\2\0\12\10\u0356\0\6\10"+
    "\2\0\1\10\1\0\54\10\1\0\2\10\3\0\1\10\2\0\27\10"+
    "\252\0\26\10\12\0\32\10\106\0\70\10\6\0\2\10\100\0\4\10"+
    "\1\0\2\10\5\0\10\10\1\0\3\10\1\0\33\10\4\0\3\10"+
    "\4\0\1\10\40\0\35\10\203\0\66\10\12\0\26\10\12\0\23\10"+
    "\215\0\111\10\u03b7\0\107\10\37\0\12\10\20\0\73\10\2\0\1\10"+
    "\22\0\31\10\7\0\12\10\6\0\65\10\1\0\12\10\100\0\105\10"+
    "\13\0\12\10\u04a6\0\70\10\10\0\12\10\u0936\0\u036f\10\221\0\143\10"+
    "\u0b9d\0\u042f\10\u33d1\0\u0239\10\u04c7\0\105\10\13\0\57\10\20\0\21\10"+
    "\u4060\0\2\10\u2163\0\5\10\3\0\26\10\2\0\7\10\36\0\4\10"+
    "\224\0\3\10\u01bb\0\125\10\1\0\107\10\1\0\2\10\2\0\1\10"+
    "\2\0\2\10\2\0\4\10\1\0\14\10\1\0\1\10\1\0\7\10"+
    "\1\0\101\10\1\0\4\10\2\0\10\10\1\0\7\10\1\0\34\10"+
    "\1\0\4\10\1\0\5\10\1\0\1\10\3\0\7\10\1\0\u0154\10"+
    "\2\0\31\10\1\0\31\10\1\0\37\10\1\0\31\10\1\0\37\10"+
    "\1\0\31\10\1\0\37\10\1\0\31\10\1\0\37\10\1\0\31\10"+
    "\1\0\10\10\2\0\62\10\u1600\0\4\10\1\0\33\10\1\0\2\10"+
    "\1\0\1\10\2\0\1\10\1\0\12\10\1\0\4\10\1\0\1\10"+
    "\1\0\1\10\6\0\1\10\4\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\2\10\1\0\1\10\2\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10\1\0\1\10"+
    "\2\0\4\10\1\0\7\10\1\0\4\10\1\0\4\10\1\0\1\10"+
    "\1\0\12\10\1\0\21\10\5\0\3\10\1\0\5\10\1\0\21\10"+
    "\u1144\0\ua6d7\10\51\0\u1035\10\13\0\336\10\u3fe2\0\u021e\10\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\34\11\1\15\110\11"+
    "\1\16\13\11\1\17\4\11\1\20\5\11\1\21\1\22"+
    "\1\11\1\23\10\11\1\24\1\25\1\26\4\11\1\27"+
    "\1\30\2\11\1\31\1\32\3\11\1\33\3\11\1\34"+
    "\4\11\1\35\12\11\1\36\5\11\1\37\1\40\3\11"+
    "\1\41\1\42\11\11\1\43\5\11\1\44\2\11\1\45"+
    "\7\11\1\46\1\11\1\47\3\11\1\50\11\11\1\51"+
    "\2\11\1\52\22\11\1\53\10\11\1\54\17\11\1\55"+
    "\6\11\1\56\4\11\1\57\1\11\1\60\2\11\1\61"+
    "\2\11\1\62\3\11\1\63\2\11\1\64\2\11\1\65"+
    "\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\152\0\65\0\65\0\237\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\u066b\0\152\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9"+
    "\0\u151e\0\u1553\0\152\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\152\0\u17cf"+
    "\0\u1804\0\u1839\0\u186e\0\152\0\u18a3\0\u18d8\0\u190d\0\u1942"+
    "\0\u1977\0\152\0\152\0\u19ac\0\152\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\152\0\152\0\152"+
    "\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\152\0\u1c92\0\u1cc7"+
    "\0\152\0\152\0\u1cfc\0\u1d31\0\u1d66\0\152\0\u1d9b\0\u1dd0"+
    "\0\u1e05\0\152\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\152\0\u1f0e"+
    "\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6"+
    "\0\u20eb\0\152\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\152"+
    "\0\152\0\u2229\0\u225e\0\u2293\0\u22c8\0\152\0\u22fd\0\u2332"+
    "\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da"+
    "\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\152\0\u2618\0\u264d"+
    "\0\152\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0"+
    "\0\152\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9\0\152\0\u28fe"+
    "\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6"+
    "\0\152\0\u2adb\0\u2b10\0\152\0\u2b45\0\u2b7a\0\u2baf\0\u2be4"+
    "\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c"+
    "\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\152\0\u2eff"+
    "\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072\0\152"+
    "\0\u30a7\0\u30dc\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a"+
    "\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\152"+
    "\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\152\0\u3500"+
    "\0\u3535\0\u356a\0\u359f\0\152\0\u35d4\0\152\0\u3609\0\u363e"+
    "\0\152\0\u3673\0\u36a8\0\152\0\u36dd\0\u3712\0\u3747\0\152"+
    "\0\u377c\0\u37b1\0\152\0\u37e6\0\u381b\0\152\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\12\1\13\1\14\1\15\1\16\1\17\1\20\3\12"+
    "\1\21\1\12\1\22\1\12\1\23\1\12\1\24\1\12"+
    "\1\25\1\12\1\26\1\12\1\27\1\30\2\31\1\32"+
    "\1\12\1\33\1\34\2\12\1\35\1\36\4\12\1\37"+
    "\1\40\3\12\1\41\75\0\2\12\3\0\50\12\14\0"+
    "\1\15\60\0\2\12\3\0\2\12\2\42\14\12\2\43"+
    "\1\44\13\12\1\45\2\12\1\46\6\12\10\0\2\12"+
    "\3\0\2\12\2\42\14\12\2\43\26\12\10\0\2\12"+
    "\3\0\6\12\1\47\15\12\1\50\23\12\10\0\2\12"+
    "\3\0\26\12\1\51\13\12\1\52\3\12\1\53\1\12"+
    "\10\0\2\12\3\0\14\12\1\54\33\12\10\0\2\12"+
    "\3\0\16\12\1\55\31\12\10\0\2\12\3\0\4\12"+
    "\1\56\43\12\10\0\2\12\3\0\6\12\1\57\41\12"+
    "\10\0\2\12\3\0\14\12\1\60\7\12\1\61\11\12"+
    "\1\62\11\12\10\0\2\12\3\0\12\12\1\63\1\12"+
    "\2\64\32\12\10\0\2\12\3\0\14\12\2\64\32\12"+
    "\10\0\2\12\3\0\2\12\2\65\44\12\10\0\2\12"+
    "\3\0\14\12\1\66\7\12\1\67\23\12\10\0\2\12"+
    "\3\0\1\70\1\71\46\12\10\0\2\12\3\0\2\71"+
    "\46\12\10\0\2\12\3\0\2\72\4\12\1\73\41\12"+
    "\10\0\2\12\3\0\2\72\46\12\10\0\2\12\3\0"+
    "\24\12\1\74\23\12\10\0\2\12\3\0\24\12\1\75"+
    "\23\12\10\0\2\12\3\0\12\12\1\76\35\12\10\0"+
    "\2\12\3\0\4\12\2\77\42\12\10\0\2\12\3\0"+
    "\20\12\2\100\26\12\10\0\2\12\3\0\20\12\1\101"+
    "\27\12\10\0\2\12\3\0\2\12\1\102\3\12\1\103"+
    "\41\12\10\0\2\12\3\0\4\12\1\104\43\12\10\0"+
    "\2\12\3\0\2\12\1\105\45\12\10\0\2\12\3\0"+
    "\45\12\1\106\2\12\10\0\2\12\3\0\1\107\47\12"+
    "\10\0\2\12\3\0\32\12\1\110\15\12\10\0\2\12"+
    "\3\0\4\12\1\111\43\12\10\0\2\12\3\0\12\12"+
    "\1\112\35\12\10\0\2\12\3\0\6\12\1\113\41\12"+
    "\10\0\2\12\3\0\2\12\1\114\45\12\10\0\2\12"+
    "\3\0\36\12\1\115\11\12\10\0\2\12\3\0\22\12"+
    "\1\116\25\12\10\0\2\12\3\0\1\117\47\12\10\0"+
    "\2\12\3\0\24\12\1\120\23\12\10\0\2\12\3\0"+
    "\26\12\2\121\20\12\10\0\2\12\3\0\6\12\2\122"+
    "\40\12\10\0\2\12\3\0\42\12\1\123\5\12\10\0"+
    "\2\12\3\0\22\12\1\124\25\12\10\0\2\12\3\0"+
    "\4\12\1\125\1\126\33\12\1\127\1\130\5\12\10\0"+
    "\2\12\3\0\4\12\2\126\42\12\10\0\2\12\3\0"+
    "\36\12\2\131\10\12\10\0\2\12\3\0\42\12\1\132"+
    "\5\12\10\0\2\12\3\0\4\12\1\133\43\12\10\0"+
    "\2\12\3\0\20\12\1\134\27\12\10\0\2\12\3\0"+
    "\16\12\1\135\31\12\10\0\2\12\3\0\6\12\2\136"+
    "\40\12\10\0\2\12\3\0\6\12\2\137\40\12\10\0"+
    "\2\12\3\0\44\12\1\140\3\12\10\0\2\12\3\0"+
    "\12\12\1\141\35\12\10\0\2\12\3\0\22\12\1\142"+
    "\25\12\10\0\2\12\3\0\24\12\1\143\23\12\10\0"+
    "\2\12\3\0\12\12\1\144\35\12\10\0\2\12\3\0"+
    "\2\12\1\145\45\12\10\0\2\12\3\0\41\12\1\146"+
    "\6\12\10\0\2\12\3\0\12\12\1\147\35\12\10\0"+
    "\2\12\3\0\4\12\1\150\43\12\10\0\2\12\3\0"+
    "\1\151\47\12\10\0\2\12\3\0\41\12\1\152\6\12"+
    "\10\0\2\12\3\0\6\12\1\153\41\12\10\0\2\12"+
    "\3\0\14\12\1\154\33\12\10\0\2\12\3\0\2\12"+
    "\1\155\45\12\10\0\2\12\3\0\16\12\1\156\31\12"+
    "\10\0\2\12\3\0\34\12\1\157\13\12\10\0\2\12"+
    "\3\0\10\12\2\160\36\12\10\0\2\12\3\0\32\12"+
    "\2\161\14\12\10\0\2\12\3\0\6\12\1\162\41\12"+
    "\10\0\2\12\3\0\12\12\1\163\35\12\10\0\2\12"+
    "\3\0\2\164\2\12\1\165\43\12\10\0\2\12\3\0"+
    "\2\164\46\12\10\0\2\12\3\0\6\12\1\166\41\12"+
    "\10\0\2\12\3\0\4\12\1\167\43\12\10\0\2\12"+
    "\3\0\14\12\2\170\32\12\10\0\2\12\3\0\24\12"+
    "\1\171\23\12\10\0\2\12\3\0\24\12\1\172\23\12"+
    "\10\0\2\12\3\0\44\12\1\173\3\12\10\0\2\12"+
    "\3\0\2\12\1\174\45\12\10\0\2\12\3\0\10\12"+
    "\2\175\36\12\10\0\2\12\3\0\14\12\2\176\32\12"+
    "\10\0\2\12\3\0\14\12\1\177\33\12\10\0\2\12"+
    "\3\0\4\12\1\200\43\12\10\0\2\12\3\0\24\12"+
    "\1\201\23\12\10\0\2\12\3\0\41\12\1\202\6\12"+
    "\10\0\2\12\3\0\36\12\1\203\11\12\10\0\2\12"+
    "\3\0\14\12\1\204\33\12\10\0\2\12\3\0\24\12"+
    "\1\205\23\12\10\0\2\12\3\0\6\12\1\206\41\12"+
    "\10\0\2\12\3\0\1\207\47\12\10\0\2\12\3\0"+
    "\4\12\1\210\43\12\10\0\2\12\3\0\24\12\1\211"+
    "\23\12\10\0\2\12\3\0\14\12\1\212\33\12\10\0"+
    "\2\12\3\0\4\12\1\213\43\12\10\0\2\12\3\0"+
    "\4\12\1\214\43\12\10\0\2\12\3\0\24\12\1\215"+
    "\23\12\10\0\2\12\3\0\1\216\13\12\1\217\33\12"+
    "\10\0\2\12\3\0\4\12\2\220\42\12\10\0\2\12"+
    "\3\0\12\12\2\221\34\12\10\0\2\12\3\0\43\12"+
    "\1\222\4\12\10\0\2\12\3\0\26\12\2\223\20\12"+
    "\10\0\2\12\3\0\1\224\47\12\10\0\2\12\3\0"+
    "\22\12\1\225\25\12\10\0\2\12\3\0\24\12\1\226"+
    "\23\12\10\0\2\12\3\0\4\12\2\227\42\12\10\0"+
    "\2\12\3\0\14\12\1\230\33\12\10\0\2\12\3\0"+
    "\20\12\1\231\27\12\10\0\2\12\3\0\1\232\47\12"+
    "\10\0\2\12\3\0\6\12\1\233\41\12\10\0\2\12"+
    "\3\0\12\12\2\234\34\12\10\0\2\12\3\0\22\12"+
    "\2\235\24\12\10\0\2\12\3\0\1\236\47\12\10\0"+
    "\2\12\3\0\1\237\47\12\10\0\2\12\3\0\1\240"+
    "\47\12\10\0\2\12\3\0\14\12\1\241\33\12\10\0"+
    "\2\12\3\0\22\12\1\242\25\12\10\0\2\12\3\0"+
    "\24\12\1\243\23\12\10\0\2\12\3\0\4\12\1\244"+
    "\43\12\10\0\2\12\3\0\6\12\1\245\41\12\10\0"+
    "\2\12\3\0\22\12\1\246\25\12\10\0\2\12\3\0"+
    "\1\247\47\12\10\0\1\12\1\250\3\0\50\12\10\0"+
    "\1\12\1\251\3\0\50\12\10\0\2\12\3\0\24\12"+
    "\2\252\22\12\10\0\2\12\3\0\24\12\2\253\22\12"+
    "\10\0\2\12\3\0\6\12\1\254\41\12\10\0\2\12"+
    "\3\0\24\12\2\255\22\12\10\0\2\12\3\0\43\12"+
    "\1\256\4\12\10\0\2\12\3\0\1\257\47\12\10\0"+
    "\2\12\3\0\44\12\1\260\3\12\10\0\1\12\1\261"+
    "\3\0\50\12\10\0\2\12\3\0\43\12\1\262\4\12"+
    "\10\0\2\12\3\0\2\12\2\263\44\12\10\0\2\12"+
    "\3\0\24\12\2\264\22\12\10\0\2\12\3\0\20\12"+
    "\1\265\27\12\10\0\2\12\3\0\4\12\1\266\43\12"+
    "\10\0\2\12\3\0\4\12\1\267\43\12\10\0\1\12"+
    "\1\270\3\0\50\12\10\0\2\12\3\0\14\12\1\271"+
    "\33\12\10\0\2\12\3\0\4\12\1\272\43\12\10\0"+
    "\2\12\3\0\30\12\1\273\17\12\10\0\2\12\3\0"+
    "\16\12\1\274\31\12\10\0\2\12\3\0\2\12\2\275"+
    "\44\12\10\0\2\12\3\0\20\12\1\276\27\12\10\0"+
    "\2\12\3\0\2\12\2\277\44\12\10\0\2\12\3\0"+
    "\14\12\1\300\33\12\10\0\2\12\3\0\1\301\47\12"+
    "\10\0\2\12\3\0\20\12\1\302\5\12\1\303\21\12"+
    "\10\0\2\12\3\0\6\12\1\304\41\12\10\0\2\12"+
    "\3\0\14\12\2\305\32\12\10\0\2\12\3\0\16\12"+
    "\2\306\30\12\10\0\2\12\3\0\6\12\1\307\41\12"+
    "\10\0\1\12\1\310\3\0\50\12\10\0\2\12\3\0"+
    "\42\12\1\311\5\12\10\0\2\12\3\0\16\12\1\312"+
    "\1\12\1\313\7\12\1\314\17\12\10\0\1\12\1\315"+
    "\3\0\50\12\10\0\2\12\3\0\1\316\47\12\10\0"+
    "\2\12\3\0\6\12\1\317\41\12\10\0\2\12\3\0"+
    "\2\320\46\12\10\0\2\12\3\0\1\321\47\12\10\0"+
    "\2\12\3\0\4\12\2\322\42\12\10\0\2\12\3\0"+
    "\4\12\1\323\43\12\10\0\2\12\3\0\14\12\1\324"+
    "\33\12\10\0\2\12\3\0\20\12\1\325\27\12\10\0"+
    "\2\12\3\0\16\12\2\326\30\12\10\0\2\12\3\0"+
    "\14\12\1\327\33\12\10\0\2\12\3\0\20\12\1\330"+
    "\27\12\10\0\2\12\3\0\1\331\47\12\10\0\2\12"+
    "\3\0\6\12\1\332\41\12\10\0\2\12\3\0\14\12"+
    "\1\333\33\12\10\0\2\12\3\0\1\334\47\12\10\0"+
    "\2\12\3\0\20\12\1\335\5\12\1\336\21\12\10\0"+
    "\2\12\3\0\41\12\1\337\6\12\10\0\2\12\3\0"+
    "\2\12\1\340\45\12\10\0\2\12\3\0\16\12\2\341"+
    "\30\12\10\0\2\12\3\0\4\12\1\342\43\12\10\0"+
    "\2\12\3\0\14\12\2\343\32\12\10\0\2\12\3\0"+
    "\24\12\1\344\23\12\10\0\2\12\3\0\42\12\1\345"+
    "\5\12\10\0\2\12\3\0\1\346\47\12\10\0\2\12"+
    "\3\0\22\12\1\347\25\12\10\0\2\12\3\0\14\12"+
    "\1\350\33\12\10\0\2\12\3\0\2\12\1\351\45\12"+
    "\10\0\2\12\3\0\26\12\1\352\21\12\10\0\2\12"+
    "\3\0\41\12\1\353\6\12\10\0\2\12\3\0\4\12"+
    "\1\354\43\12\10\0\2\12\3\0\14\12\1\355\33\12"+
    "\10\0\2\12\3\0\6\12\1\356\41\12\10\0\2\12"+
    "\3\0\6\12\1\357\41\12\10\0\1\12\1\360\3\0"+
    "\50\12\10\0\2\12\3\0\16\12\2\361\30\12\10\0"+
    "\2\12\3\0\1\362\47\12\10\0\2\12\3\0\6\12"+
    "\1\363\41\12\10\0\2\12\3\0\4\12\1\364\43\12"+
    "\10\0\2\12\3\0\26\12\1\365\21\12\10\0\2\12"+
    "\3\0\6\12\1\366\41\12\10\0\2\12\3\0\30\12"+
    "\1\367\17\12\10\0\2\12\3\0\6\12\1\370\41\12"+
    "\10\0\2\12\3\0\24\12\1\371\23\12\10\0\2\12"+
    "\3\0\42\12\1\372\5\12\10\0\2\12\3\0\22\12"+
    "\1\373\25\12\10\0\2\12\3\0\14\12\1\374\33\12"+
    "\10\0\2\12\3\0\20\12\1\375\7\12\1\376\17\12"+
    "\10\0\2\12\3\0\20\12\1\377\27\12\10\0\2\12"+
    "\3\0\43\12\1\u0100\4\12\10\0\2\12\3\0\30\12"+
    "\1\u0101\17\12\10\0\2\12\3\0\14\12\1\u0102\33\12"+
    "\10\0\2\12\3\0\14\12\1\u0103\33\12\10\0\2\12"+
    "\3\0\22\12\1\u0104\25\12\10\0\2\12\3\0\1\u0105"+
    "\47\12\10\0\2\12\3\0\6\12\1\u0106\41\12\10\0"+
    "\2\12\3\0\1\u0107\47\12\10\0\1\12\1\u0108\3\0"+
    "\50\12\10\0\2\12\3\0\14\12\1\u0109\33\12\10\0"+
    "\2\12\3\0\1\u010a\47\12\10\0\2\12\3\0\6\12"+
    "\1\u010b\41\12\10\0\2\12\3\0\6\12\1\u010c\41\12"+
    "\10\0\2\12\3\0\14\12\1\u010d\33\12\10\0\1\12"+
    "\1\u010e\3\0\50\12\10\0\2\12\3\0\22\12\1\u010f"+
    "\25\12\10\0\2\12\3\0\1\u0110\47\12\10\0\2\12"+
    "\3\0\20\12\1\u0111\27\12\10\0\2\12\3\0\43\12"+
    "\1\u0112\4\12\10\0\2\12\3\0\40\12\1\u0113\7\12"+
    "\10\0\2\12\3\0\26\12\1\u0114\21\12\10\0\2\12"+
    "\3\0\41\12\1\u0115\6\12\10\0\2\12\3\0\14\12"+
    "\1\u0116\33\12\10\0\2\12\3\0\20\12\1\u0117\27\12"+
    "\10\0\2\12\3\0\22\12\1\u0118\25\12\10\0\2\12"+
    "\3\0\40\12\1\u0119\7\12\10\0\2\12\3\0\24\12"+
    "\1\u011a\23\12\10\0\2\12\3\0\6\12\1\u011b\41\12"+
    "\10\0\2\12\3\0\6\12\1\u011c\41\12\10\0\2\12"+
    "\3\0\24\12\1\u011d\23\12\10\0\2\12\3\0\30\12"+
    "\1\u011e\17\12\10\0\2\12\3\0\6\12\1\u011f\41\12"+
    "\10\0\2\12\3\0\22\12\1\u0120\25\12\10\0\2\12"+
    "\3\0\1\u0121\47\12\10\0\2\12\3\0\24\12\1\u0122"+
    "\23\12\10\0\2\12\3\0\24\12\1\u0123\23\12\10\0"+
    "\2\12\3\0\22\12\1\u0124\25\12\10\0\2\12\3\0"+
    "\14\12\1\u0125\33\12\10\0\2\12\3\0\20\12\1\u0126"+
    "\27\12\10\0\2\12\3\0\10\12\1\u0127\37\12\10\0"+
    "\2\12\3\0\14\12\1\u0128\33\12\10\0\2\12\3\0"+
    "\22\12\1\u0129\25\12\10\0\2\12\3\0\20\12\1\u012a"+
    "\27\12\10\0\2\12\3\0\22\12\1\u012b\25\12\10\0"+
    "\2\12\3\0\10\12\1\u012c\37\12\10\0\2\12\3\0"+
    "\2\12\1\u012d\45\12\10\0\2\12\3\0\22\12\1\u012e"+
    "\25\12\10\0\2\12\3\0\1\u012f\47\12\10\0\2\12"+
    "\3\0\22\12\1\u0130\25\12\10\0\2\12\3\0\1\u0131"+
    "\47\12\10\0\2\12\3\0\6\12\1\u0132\41\12\10\0"+
    "\2\12\3\0\2\12\1\u0133\45\12\10\0\2\12\3\0"+
    "\24\12\1\u0134\23\12\10\0\2\12\3\0\20\12\1\u0135"+
    "\27\12\10\0\2\12\3\0\24\12\1\u0136\23\12\10\0"+
    "\2\12\3\0\14\12\1\u0137\33\12\10\0\2\12\3\0"+
    "\24\12\1\u0138\23\12\10\0\2\12\3\0\6\12\1\u0139"+
    "\41\12\10\0\2\12\3\0\22\12\1\u013a\25\12\10\0"+
    "\2\12\3\0\22\12\1\u013b\25\12\10\0\2\12\3\0"+
    "\14\12\1\u013c\33\12\10\0\2\12\3\0\2\12\1\u013d"+
    "\45\12\10\0\2\12\3\0\22\12\1\u013e\25\12\10\0"+
    "\2\12\3\0\24\12\1\u013f\23\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14416];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\10\11\1\1\2\11\u0133\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    


 
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  pruebaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2516) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.printf("ERROR [%s]\n" , yytext());
            }
          case 55: break;
          case 2: 
            { System.out.printf("MENOR_Q [%s]\n" , yytext());
            }
          case 56: break;
          case 3: 
            { System.out.printf("MAYOR_Q [%s]\n" , yytext());
            }
          case 57: break;
          case 4: 
            { System.out.printf("DIAGONAL [%s]\n" , yytext());
            }
          case 58: break;
          case 5: 
            { System.out.printf("COMILLA [%s]\n" , yytext());
            }
          case 59: break;
          case 6: 
            { System.out.printf("IGUAL [%s]\n" , yytext());
            }
          case 60: break;
          case 7: 
            { System.out.printf("A_CORCHETE [%s]\n" , yytext());
            }
          case 61: break;
          case 8: 
            { System.out.printf("C_CORCHETE [%s]\n" , yytext());
            }
          case 62: break;
          case 9: 
            { System.out.printf("IDENTIFICADOR [%s]\n" , yytext());
            }
          case 63: break;
          case 10: 
            { /* ignoramos */
            }
          case 64: break;
          case 11: 
            { System.out.printf("ENTER [ ]\n");
            }
          case 65: break;
          case 12: 
            { System.out.printf("ESPACIO [ ]\n");
            }
          case 66: break;
          case 13: 
            { System.out.printf("ID [%s]\n" , yytext());
            }
          case 67: break;
          case 14: 
            { System.out.printf("MENU [%s]\n" , yytext());
            }
          case 68: break;
          case 15: 
            { System.out.printf("ANCHO [%s]\n" , yytext());
            }
          case 69: break;
          case 16: 
            { System.out.printf("TEXTO [%s]\n" , yytext());
            }
          case 70: break;
          case 17: 
            { System.out.printf("SITIO [%s]\n" , yytext());
            }
          case 71: break;
          case 18: 
            { System.out.printf("COLOR [%s]\n" , yytext());
            }
          case 72: break;
          case 19: 
            { System.out.printf("CLASE [%s]\n" , yytext());
            }
          case 73: break;
          case 20: 
            { System.out.printf("PADRE [%s]\n" , yytext());
            }
          case 74: break;
          case 21: 
            { System.out.printf("VALOR [%s]\n" , yytext());
            }
          case 75: break;
          case 22: 
            { System.out.printf("VIDEO [%s]\n" , yytext());
            }
          case 76: break;
          case 23: 
            { System.out.printf("ACCION [%s]\n" , yytext());
            }
          case 77: break;
          case 24: 
            { System.out.printf("ALTURA [%s]\n" , yytext());
            }
          case 78: break;
          case 25: 
            { System.out.printf("TITULO [%s]\n" , yytext());
            }
          case 79: break;
          case 26: 
            { System.out.printf("IMAGEN [%s]\n" , yytext());
            }
          case 80: break;
          case 27: 
            { System.out.printf("ORIGEN [%s]\n" , yytext());
            }
          case 81: break;
          case 28: 
            { System.out.printf("NOMBRE [%s]\n" , yytext());
            }
          case 82: break;
          case 29: 
            { System.out.printf("PAGINA [%s]\n" , yytext());
            }
          case 83: break;
          case 30: 
            { System.out.printf("CENTRAR [%s]\n" , yytext());
            }
          case 84: break;
          case 31: 
            { System.out.printf("PARRAFO [%s]\n" , yytext());
            }
          case 85: break;
          case 32: 
            { System.out.printf("DERECHA [%s]\n" , yytext());
            }
          case 86: break;
          case 33: 
            { System.out.printf("ATRIBUTO [%s]\n" , yytext());
            }
          case 87: break;
          case 34: 
            { System.out.printf("ACCIONES [%s]\n" , yytext());
            }
          case 88: break;
          case 35: 
            { System.out.printf("ETIQUETA [%s]\n" , yytext());
            }
          case 89: break;
          case 36: 
            { System.out.printf("ATRIBUTOS [%s]\n" , yytext());
            }
          case 90: break;
          case 37: 
            { System.out.printf("IZQUIERDA [%s]\n" , yytext());
            }
          case 91: break;
          case 38: 
            { System.out.printf("ETIQUETAS [%s]\n" , yytext());
            }
          case 92: break;
          case 39: 
            { System.out.printf("PARAMETRO [%s]\n" , yytext());
            }
          case 93: break;
          case 40: 
            { System.out.printf("ALINEACION [%s]\n" , yytext());
            }
          case 94: break;
          case 41: 
            { System.out.printf("PARAMETROS [%s]\n" , yytext());
            }
          case 95: break;
          case 42: 
            { System.out.printf("JUSTIFICAR [%s]\n" , yytext());
            }
          case 96: break;
          case 43: 
            { System.out.printf("NUEVA_PAGINA [%s]\n" , yytext());
            }
          case 97: break;
          case 44: 
            { System.out.printf("BORRAR_PAGINA [%s]\n" , yytext());
            }
          case 98: break;
          case 45: 
            { System.out.printf("FECHA_CREACION [%s]\n" , yytext());
            }
          case 99: break;
          case 46: 
            { System.out.printf("NUEVO_SITIO_WEB [%s]\n" , yytext());
            }
          case 100: break;
          case 47: 
            { System.out.printf("BORRAR_SITIO_WEB [%s]\n" , yytext());
            }
          case 101: break;
          case 48: 
            { System.out.printf("USUARIO_CREACION [%s]\n" , yytext());
            }
          case 102: break;
          case 49: 
            { System.out.printf("MODIFICAR_PAGINA [%s]\n" , yytext());
            }
          case 103: break;
          case 50: 
            { System.out.printf("BORRAR_COMPONENTE [%s]\n" , yytext());
            }
          case 104: break;
          case 51: 
            { System.out.printf("AGREGAR_COMPONENTE [%s]\n" , yytext());
            }
          case 105: break;
          case 52: 
            { System.out.printf("FECHA_MODIFICACION [%s]\n" , yytext());
            }
          case 106: break;
          case 53: 
            { System.out.printf("USUARIO_MODIFICACION [%s]\n" , yytext());
            }
          case 107: break;
          case 54: 
            { System.out.printf("MODIFICAR_COMPONENTE [%s]\n" , yytext());
            }
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java pruebaLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        pruebaLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new pruebaLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
