
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import gui.Frames.VentanaAppCliente;
import Manejadores.ManejadorVerificacionObligatorios;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\004\000\002\071\003\000\002\071" +
    "\012\000\002\072\003\000\002\072\004\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\103\017\000\002\104\012\000\002\105" +
    "\003\000\002\105\004\000\002\107\017\000\002\110\012" +
    "\000\002\074\020\000\002\074\017\000\002\075\012\000" +
    "\002\076\003\000\002\076\004\000\002\100\017\000\002" +
    "\101\014\000\002\101\013\000\002\101\013\000\002\111" +
    "\017\000\002\112\012\000\002\113\017\000\002\114\017" +
    "\000\002\115\010\000\002\116\013\000\002\120\004\000" +
    "\002\120\004\000\002\120\004\000\002\120\004\000\002" +
    "\120\004\000\002\121\013\000\002\122\013\000\002\123" +
    "\013\000\002\124\013\000\002\125\013\000\002\126\012" +
    "\000\002\127\003\000\002\127\004\000\002\130\012\000" +
    "\002\131\003\000\002\131\004\000\002\132\012\000\002" +
    "\133\003\000\002\133\004\000\002\134\012\000\002\135" +
    "\003\000\002\135\004\000\002\136\012\000\002\137\003" +
    "\000\002\137\004\000\002\155\017\000\002\156\013\000" +
    "\002\140\003\000\002\140\003\000\002\140\003\000\002" +
    "\141\003\000\002\141\003\000\002\141\003\000\002\142" +
    "\003\000\002\142\003\000\002\142\003\000\002\142\003" +
    "\000\002\143\003\000\002\143\003\000\002\143\003\000" +
    "\002\144\003\000\002\144\003\000\002\145\017\000\002" +
    "\146\017\000\002\146\017\000\002\146\017\000\002\146" +
    "\017\000\002\147\017\000\002\150\017\000\002\151\017" +
    "\000\002\152\017\000\002\153\017\000\002\154\017\000" +
    "\002\106\003\000\002\106\003\000\002\106\003\000\002" +
    "\106\003\000\002\106\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\157\017\000\002\160\017\000\002\161\017" +
    "\000\002\162\017\000\002\163\017\000\002\164\017\000" +
    "\002\165\017\000\002\166\017\000\002\117\017\000\002" +
    "\167\012\000\002\170\003\000\002\170\004\000\002\171" +
    "\011\000\002\002\003\000\002\003\003\000\002\004\003" +
    "\000\002\005\003\000\002\007\003\000\002\010\003\000" +
    "\002\011\003\000\002\012\003\000\002\013\003\000\002" +
    "\014\003\000\002\015\003\000\002\016\003\000\002\017" +
    "\003\000\002\020\003\000\002\021\003\000\002\022\003" +
    "\000\002\023\003\000\002\024\003\000\002\025\003\000" +
    "\002\026\003\000\002\027\003\000\002\030\003\000\002" +
    "\031\003\000\002\032\003\000\002\033\003\000\002\034" +
    "\003\000\002\035\003\000\002\036\003\000\002\037\003" +
    "\000\002\040\003\000\002\041\003\000\002\042\003\000" +
    "\002\043\003\000\002\044\003\000\002\045\003\000\002" +
    "\046\003\000\002\047\003\000\002\050\003\000\002\051" +
    "\003\000\002\052\003\000\002\053\003\000\002\054\003" +
    "\000\002\055\003\000\002\056\003\000\002\057\003\000" +
    "\002\060\003\000\002\006\003\000\002\062\003\000\002" +
    "\061\003\000\002\063\003\000\002\064\003\000\002\065" +
    "\003\000\002\066\003\000\002\067\003\000\002\070\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0245\000\004\004\014\001\002\000\006\002\ufffa\004" +
    "\ufffa\001\002\000\006\002\ufffb\004\ufffb\001\002\000\006" +
    "\002\ufff5\004\ufff5\001\002\000\006\013\021\014\024\001" +
    "\002\000\006\002\ufff9\004\ufff9\001\002\000\006\002\ufffc" +
    "\004\ufffc\001\002\000\004\002\020\001\002\000\006\002" +
    "\ufff6\004\ufff6\001\002\000\024\006\uff89\011\uff89\012\uff89" +
    "\013\uff89\014\uff89\016\uff89\017\uff89\020\uff89\021\uff89\001" +
    "\002\000\004\002\000\001\002\000\006\002\ufff8\004\ufff8" +
    "\001\002\000\006\002\ufff7\004\ufff7\001\002\000\004\002" +
    "\001\001\002\000\006\005\uff83\015\uff83\001\002\000\004" +
    "\015\040\001\002\000\004\005\026\001\002\000\004\005" +
    "\uff82\001\002\000\004\004\014\001\002\000\044\002\uff88" +
    "\004\uff88\040\uff88\045\uff88\046\uff88\047\uff88\050\uff88\053" +
    "\uff88\054\uff88\055\uff88\056\uff88\062\uff88\065\uff88\066\uff88" +
    "\070\uff88\071\uff88\072\uff88\001\002\000\004\004\014\001" +
    "\002\000\004\013\021\001\002\000\004\004\ufffe\001\002" +
    "\000\006\006\034\013\021\001\002\000\004\004\ufffd\001" +
    "\002\000\022\005\uff87\011\uff87\012\uff87\013\uff87\014\uff87" +
    "\016\uff87\017\uff87\021\uff87\001\002\000\004\014\024\001" +
    "\002\000\004\005\026\001\002\000\004\002\uffff\001\002" +
    "\000\004\010\uff81\001\002\000\004\010\042\001\002\000" +
    "\006\007\uff5b\067\uff5b\001\002\000\004\007\044\001\002" +
    "\000\066\005\uff86\021\uff86\023\uff86\024\uff86\025\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86" +
    "\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043" +
    "\uff86\044\uff86\051\uff86\052\uff86\057\uff86\060\uff86\061\uff86" +
    "\063\uff86\001\002\000\022\023\052\024\054\025\055\026" +
    "\056\027\057\030\062\031\060\032\063\001\002\000\004" +
    "\007\044\001\002\000\004\007\044\001\002\000\004\007" +
    "\044\001\002\000\004\007\044\001\002\000\004\007\uff7b" +
    "\001\002\000\004\007\044\001\002\000\004\007\uff7a\001" +
    "\002\000\004\007\uff79\001\002\000\004\007\uff78\001\002" +
    "\000\004\007\uff77\001\002\000\004\007\uff75\001\002\000" +
    "\004\007\044\001\002\000\004\007\uff76\001\002\000\004" +
    "\007\uff74\001\002\000\004\007\044\001\002\000\004\007" +
    "\044\001\002\000\004\005\026\001\002\000\004\004\014" +
    "\001\002\000\004\004\014\001\002\000\004\017\072\001" +
    "\002\000\004\005\uff7f\001\002\000\004\005\026\001\002" +
    "\000\004\004\014\001\002\000\004\016\101\001\002\000" +
    "\004\004\014\001\002\000\004\004\014\001\002\000\004" +
    "\016\101\001\002\000\006\005\uff80\015\uff80\001\002\000" +
    "\004\015\040\001\002\000\004\010\042\001\002\000\004" +
    "\007\044\001\002\000\004\043\107\001\002\000\004\007" +
    "\044\001\002\000\004\007\uff6b\001\002\000\004\005\026" +
    "\001\002\000\004\062\112\001\002\000\004\004\uff5c\001" +
    "\002\000\004\004\014\001\002\000\004\006\034\001\002" +
    "\000\004\016\101\001\002\000\004\005\026\001\002\000" +
    "\004\004\uff8e\001\002\000\004\016\101\001\002\000\004" +
    "\004\uffe1\001\002\000\004\015\040\001\002\000\004\010" +
    "\042\001\002\000\004\007\044\001\002\000\004\044\127" +
    "\001\002\000\004\007\044\001\002\000\004\007\uff6a\001" +
    "\002\000\004\005\026\001\002\000\014\040\134\045\144" +
    "\046\142\047\141\050\133\001\002\000\004\004\uffe0\001" +
    "\002\000\004\004\uff66\001\002\000\006\004\uff6e\007\uff6e" +
    "\001\002\000\004\004\014\001\002\000\004\004\014\001" +
    "\002\000\004\004\014\001\002\000\004\004\014\001\002" +
    "\000\004\004\uff67\001\002\000\004\004\uff68\001\002\000" +
    "\004\004\014\001\002\000\004\004\uff69\001\002\000\004" +
    "\006\034\001\002\000\004\004\uffdc\001\002\000\004\016" +
    "\101\001\002\000\004\005\026\001\002\000\004\004\014" +
    "\001\002\000\004\006\034\001\002\000\004\017\072\001" +
    "\002\000\004\005\026\001\002\000\004\004\014\001\002" +
    "\000\004\012\160\001\002\000\004\004\uffd7\001\002\000" +
    "\004\005\uff84\001\002\000\004\005\026\001\002\000\004" +
    "\004\014\001\002\000\004\004\uffb8\001\002\000\004\004" +
    "\uffba\001\002\000\004\011\175\001\002\000\004\004\014" +
    "\001\002\000\004\004\uffb9\001\002\000\004\004\uffcb\001" +
    "\002\000\006\006\034\011\175\001\002\000\004\004\uffca" +
    "\001\002\000\004\015\040\001\002\000\004\012\160\001" +
    "\002\000\006\005\uff85\015\uff85\001\002\000\004\005\026" +
    "\001\002\000\004\004\uffcc\001\002\000\004\010\042\001" +
    "\002\000\004\007\044\001\002\000\010\060\206\061\210" +
    "\063\205\001\002\000\004\007\044\001\002\000\004\007" +
    "\044\001\002\000\004\007\uff5a\001\002\000\004\007\uff5e" +
    "\001\002\000\004\007\044\001\002\000\004\007\uff5d\001" +
    "\002\000\004\005\026\001\002\000\004\070\213\001\002" +
    "\000\004\004\uff55\001\002\000\004\004\014\001\002\000" +
    "\004\006\034\001\002\000\004\011\175\001\002\000\004" +
    "\005\026\001\002\000\004\004\uffae\001\002\000\004\005" +
    "\026\001\002\000\004\072\223\001\002\000\004\004\uff53" +
    "\001\002\000\004\004\014\001\002\000\004\006\034\001" +
    "\002\000\004\011\175\001\002\000\004\005\026\001\002" +
    "\000\004\004\uffaf\001\002\000\004\005\026\001\002\000" +
    "\004\070\213\001\002\000\004\004\014\001\002\000\004" +
    "\006\034\001\002\000\004\011\175\001\002\000\004\005" +
    "\026\001\002\000\004\004\uffad\001\002\000\004\004\uffdb" +
    "\001\002\000\004\006\034\001\002\000\004\016\101\001" +
    "\002\000\004\005\026\001\002\000\004\004\014\001\002" +
    "\000\004\006\034\001\002\000\004\017\072\001\002\000" +
    "\004\005\026\001\002\000\004\004\014\001\002\000\004" +
    "\012\160\001\002\000\004\004\uffd6\001\002\000\004\005" +
    "\026\001\002\000\004\004\014\001\002\000\004\004\uffb7" +
    "\001\002\000\004\011\175\001\002\000\004\004\uffb6\001" +
    "\002\000\004\004\014\001\002\000\004\004\uffc8\001\002" +
    "\000\006\006\034\011\175\001\002\000\004\004\uffc7\001" +
    "\002\000\004\015\040\001\002\000\004\012\160\001\002" +
    "\000\004\005\026\001\002\000\004\004\uffc9\001\002\000" +
    "\004\010\042\001\002\000\004\007\044\001\002\000\006" +
    "\021\274\042\275\001\002\000\004\007\044\001\002\000" +
    "\006\005\uff7d\007\uff7d\001\002\000\004\007\uff6c\001\002" +
    "\000\004\007\044\001\002\000\004\005\026\001\002\000" +
    "\004\062\112\001\002\000\004\004\014\001\002\000\004" +
    "\006\034\001\002\000\004\011\175\001\002\000\004\005" +
    "\026\001\002\000\004\004\uffab\001\002\000\004\005\026" +
    "\001\002\000\004\062\112\001\002\000\004\004\014\001" +
    "\002\000\004\006\034\001\002\000\004\011\175\001\002" +
    "\000\004\005\026\001\002\000\004\004\uffac\001\002\000" +
    "\004\006\034\001\002\000\004\004\uffdf\001\002\000\004" +
    "\016\101\001\002\000\004\005\026\001\002\000\004\004" +
    "\014\001\002\000\004\006\034\001\002\000\004\017\072" +
    "\001\002\000\004\005\026\001\002\000\004\004\014\001" +
    "\002\000\004\004\uffda\001\002\000\004\012\160\001\002" +
    "\000\004\005\026\001\002\000\004\004\014\001\002\000" +
    "\004\004\014\001\002\000\004\011\175\001\002\000\004" +
    "\004\uffd4\001\002\000\004\004\uffc4\001\002\000\004\004" +
    "\uffc3\001\002\000\004\004\uffc2\001\002\000\004\015\040" +
    "\001\002\000\004\010\042\001\002\000\004\007\044\001" +
    "\002\000\010\051\344\052\346\057\345\001\002\000\004" +
    "\007\uff65\001\002\000\004\007\uff5f\001\002\000\004\007" +
    "\uff64\001\002\000\004\007\044\001\002\000\004\007\044" +
    "\001\002\000\004\007\044\001\002\000\004\005\026\001" +
    "\002\000\004\071\354\001\002\000\004\004\uff54\001\002" +
    "\000\004\004\014\001\002\000\004\006\034\001\002\000" +
    "\004\011\175\001\002\000\004\005\026\001\002\000\004" +
    "\004\uffb0\001\002\000\004\005\026\001\002\000\012\053" +
    "\366\054\367\055\364\056\372\001\002\000\004\004\uff61" +
    "\001\002\000\004\004\014\001\002\000\004\004\uff63\001" +
    "\002\000\004\004\uff62\001\002\000\004\004\014\001\002" +
    "\000\004\004\014\001\002\000\004\004\uff60\001\002\000" +
    "\004\004\014\001\002\000\004\006\034\001\002\000\004" +
    "\011\175\001\002\000\004\005\026\001\002\000\004\004" +
    "\uffb1\001\002\000\004\006\034\001\002\000\004\011\175" +
    "\001\002\000\004\005\026\001\002\000\004\004\uffb4\001" +
    "\002\000\004\006\034\001\002\000\004\011\175\001\002" +
    "\000\004\005\026\001\002\000\004\004\uffb3\001\002\000" +
    "\004\006\034\001\002\000\004\011\175\001\002\000\004" +
    "\005\026\001\002\000\004\004\uffb2\001\002\000\004\005" +
    "\026\001\002\000\004\065\u010f\001\002\000\004\004\014" +
    "\001\002\000\004\004\uff58\001\002\000\004\006\034\001" +
    "\002\000\004\011\175\001\002\000\004\005\026\001\002" +
    "\000\004\004\uffb5\001\002\000\006\006\034\011\175\001" +
    "\002\000\004\004\uffd3\001\002\000\004\012\160\001\002" +
    "\000\004\005\026\001\002\000\004\004\uffd5\001\002\000" +
    "\004\006\034\001\002\000\004\004\uffde\001\002\000\004" +
    "\016\101\001\002\000\004\005\026\001\002\000\004\004" +
    "\014\001\002\000\004\006\034\001\002\000\004\017\072" +
    "\001\002\000\004\005\026\001\002\000\004\004\014\001" +
    "\002\000\004\012\160\001\002\000\004\004\uffd9\001\002" +
    "\000\004\005\026\001\002\000\004\004\014\001\002\000" +
    "\004\004\014\001\002\000\004\004\uffc1\001\002\000\004" +
    "\004\uffc0\001\002\000\004\004\uffbf\001\002\000\004\004" +
    "\uffd1\001\002\000\006\006\034\011\175\001\002\000\004" +
    "\004\uffd0\001\002\000\004\012\160\001\002\000\004\005" +
    "\026\001\002\000\004\004\uffd2\001\002\000\004\006\034" +
    "\001\002\000\004\004\uffdd\001\002\000\004\016\101\001" +
    "\002\000\004\005\026\001\002\000\004\004\014\001\002" +
    "\000\004\006\034\001\002\000\004\017\072\001\002\000" +
    "\004\005\026\001\002\000\004\004\014\001\002\000\004" +
    "\004\uffd8\001\002\000\004\012\160\001\002\000\004\005" +
    "\026\001\002\000\004\004\014\001\002\000\004\004\uffbe" +
    "\001\002\000\004\004\uffbb\001\002\000\004\004\014\001" +
    "\002\000\004\011\175\001\002\000\004\004\uffbd\001\002" +
    "\000\004\004\uffbc\001\002\000\004\004\uffce\001\002\000" +
    "\004\015\040\001\002\000\004\010\042\001\002\000\004" +
    "\007\044\001\002\000\012\052\346\060\206\061\210\063" +
    "\205\001\002\000\006\006\034\011\175\001\002\000\004" +
    "\004\uffcd\001\002\000\004\012\160\001\002\000\004\005" +
    "\026\001\002\000\004\004\uffcf\001\002\000\004\015\040" +
    "\001\002\000\004\010\042\001\002\000\004\007\044\001" +
    "\002\000\004\033\u0151\001\002\000\004\007\uff73\001\002" +
    "\000\004\007\044\001\002\000\004\005\026\001\002\000" +
    "\004\062\112\001\002\000\004\004\014\001\002\000\004" +
    "\006\034\001\002\000\004\016\101\001\002\000\004\005" +
    "\026\001\002\000\004\004\uff96\001\002\000\004\006\034" +
    "\001\002\000\004\013\021\001\002\000\004\005\026\001" +
    "\002\000\006\002\uffe2\004\uffe2\001\002\000\004\005\026" +
    "\001\002\000\004\004\014\001\002\000\004\004\014\001" +
    "\002\000\004\017\072\001\002\000\004\005\026\001\002" +
    "\000\004\004\014\001\002\000\004\004\014\001\002\000" +
    "\004\004\014\001\002\000\004\006\034\001\002\000\004" +
    "\017\072\001\002\000\004\005\026\001\002\000\004\004" +
    "\uffc5\001\002\000\004\006\034\001\002\000\004\013\021" +
    "\001\002\000\004\005\026\001\002\000\006\002\uffc6\004" +
    "\uffc6\001\002\000\004\005\026\001\002\000\004\004\014" +
    "\001\002\000\004\017\072\001\002\000\004\004\014\001" +
    "\002\000\004\006\034\001\002\000\004\013\021\001\002" +
    "\000\004\005\026\001\002\000\006\002\uffe5\004\uffe5\001" +
    "\002\000\004\005\026\001\002\000\004\004\014\001\002" +
    "\000\004\004\014\001\002\000\004\006\034\001\002\000" +
    "\004\017\072\001\002\000\004\005\026\001\002\000\004" +
    "\004\uffe4\001\002\000\004\005\026\001\002\000\004\004" +
    "\014\001\002\000\004\004\014\001\002\000\004\017\072" +
    "\001\002\000\004\005\026\001\002\000\004\004\014\001" +
    "\002\000\004\004\014\001\002\000\004\004\uffa1\001\002" +
    "\000\004\004\uffa2\001\002\000\004\016\101\001\002\000" +
    "\004\004\uffa4\001\002\000\004\004\uffa0\001\002\000\004" +
    "\004\uff9f\001\002\000\004\004\uffa5\001\002\000\004\004" +
    "\uffeb\001\002\000\004\004\uffa3\001\002\000\004\004\uff9e" +
    "\001\002\000\004\015\040\001\002\000\004\010\042\001" +
    "\002\000\004\007\044\001\002\000\022\033\u0151\034\u0192" +
    "\035\u019c\036\u019a\037\u019d\040\134\041\u0195\042\275\001" +
    "\002\000\004\007\uff72\001\002\000\004\007\044\001\002" +
    "\000\004\007\044\001\002\000\004\007\uff6d\001\002\000" +
    "\004\007\044\001\002\000\004\007\044\001\002\000\004" +
    "\007\044\001\002\000\004\007\044\001\002\000\004\007" +
    "\uff70\001\002\000\004\007\044\001\002\000\004\007\uff71" +
    "\001\002\000\004\007\uff6f\001\002\000\004\005\026\001" +
    "\002\000\004\065\u010f\001\002\000\004\004\014\001\002" +
    "\000\004\006\034\001\002\000\004\016\101\001\002\000" +
    "\004\005\026\001\002\000\004\004\uff95\001\002\000\004" +
    "\005\026\001\002\000\004\066\u01a7\001\002\000\004\004" +
    "\uff57\001\002\000\004\004\014\001\002\000\004\006\034" +
    "\001\002\000\004\016\101\001\002\000\004\005\026\001" +
    "\002\000\004\004\uff90\001\002\000\004\005\026\001\002" +
    "\000\004\062\112\001\002\000\004\004\014\001\002\000" +
    "\004\006\034\001\002\000\004\016\101\001\002\000\004" +
    "\005\026\001\002\000\004\004\uff93\001\002\000\004\005" +
    "\026\001\002\000\004\062\112\001\002\000\004\004\014" +
    "\001\002\000\004\006\034\001\002\000\004\016\101\001" +
    "\002\000\004\005\026\001\002\000\004\004\uff8f\001\002" +
    "\000\004\005\026\001\002\000\004\062\112\001\002\000" +
    "\004\004\014\001\002\000\004\006\034\001\002\000\004" +
    "\016\101\001\002\000\004\005\026\001\002\000\004\004" +
    "\uff94\001\002\000\004\005\026\001\002\000\004\066\u01a7" +
    "\001\002\000\004\004\014\001\002\000\004\006\034\001" +
    "\002\000\004\016\101\001\002\000\004\005\026\001\002" +
    "\000\004\004\uff91\001\002\000\004\005\026\001\002\000" +
    "\004\062\112\001\002\000\004\004\014\001\002\000\004" +
    "\006\034\001\002\000\004\016\101\001\002\000\004\005" +
    "\026\001\002\000\004\004\uff92\001\002\000\006\006\034" +
    "\016\101\001\002\000\004\004\uffea\001\002\000\004\017" +
    "\072\001\002\000\004\005\026\001\002\000\004\004\uffec" +
    "\001\002\000\004\004\014\001\002\000\006\006\034\021" +
    "\274\001\002\000\004\013\021\001\002\000\004\005\026" +
    "\001\002\000\004\004\014\001\002\000\004\004\014\001" +
    "\002\000\004\020\u01de\001\002\000\004\004\uff8c\001\002" +
    "\000\004\022\u01df\001\002\000\004\022\uff7e\001\002\000" +
    "\004\010\uff7c\001\002\000\004\010\042\001\002\000\004" +
    "\067\u01e2\001\002\000\004\006\uff56\001\002\000\004\006" +
    "\034\001\002\000\004\005\026\001\002\000\004\004\uff8a" +
    "\001\002\000\006\006\034\020\u01de\001\002\000\004\004" +
    "\uff8b\001\002\000\004\021\274\001\002\000\004\005\026" +
    "\001\002\000\004\004\uff8d\001\002\000\004\005\026\001" +
    "\002\000\006\002\uffed\004\uffed\001\002\000\004\006\034" +
    "\001\002\000\004\013\021\001\002\000\004\005\026\001" +
    "\002\000\006\002\uffee\004\uffee\001\002\000\004\005\026" +
    "\001\002\000\004\004\014\001\002\000\004\004\014\001" +
    "\002\000\004\017\072\001\002\000\004\005\026\001\002" +
    "\000\004\004\014\001\002\000\004\004\uffa9\001\002\000" +
    "\004\016\101\001\002\000\004\004\uffa8\001\002\000\004" +
    "\004\uffa7\001\002\000\004\004\ufff2\001\002\000\004\004" +
    "\uffaa\001\002\000\004\004\014\001\002\000\004\004\uffa6" +
    "\001\002\000\004\004\ufff1\001\002\000\006\006\034\016" +
    "\101\001\002\000\004\017\072\001\002\000\004\015\040" +
    "\001\002\000\004\010\042\001\002\000\004\007\044\001" +
    "\002\000\014\033\u0151\034\u0192\035\u019c\036\u019a\037\u019d" +
    "\001\002\000\004\005\026\001\002\000\004\004\ufff3\001" +
    "\002\000\004\006\034\001\002\000\004\013\021\001\002" +
    "\000\004\005\026\001\002\000\006\002\ufff4\004\ufff4\001" +
    "\002\000\004\005\026\001\002\000\004\004\014\001\002" +
    "\000\004\017\072\001\002\000\004\004\014\001\002\000" +
    "\004\006\034\001\002\000\004\013\021\001\002\000\004" +
    "\005\026\001\002\000\006\002\ufff0\004\ufff0\001\002\000" +
    "\004\005\026\001\002\000\004\004\014\001\002\000\004" +
    "\004\014\001\002\000\004\006\034\001\002\000\004\017" +
    "\072\001\002\000\004\005\026\001\002\000\004\004\uffef" +
    "\001\002\000\004\005\026\001\002\000\004\004\014\001" +
    "\002\000\004\017\072\001\002\000\004\004\014\001\002" +
    "\000\004\006\034\001\002\000\004\013\021\001\002\000" +
    "\004\005\026\001\002\000\006\002\uffe9\004\uffe9\001\002" +
    "\000\004\005\026\001\002\000\004\004\014\001\002\000" +
    "\004\016\101\001\002\000\004\004\014\001\002\000\004" +
    "\004\014\001\002\000\006\006\034\016\101\001\002\000" +
    "\004\004\014\001\002\000\004\006\034\001\002\000\004" +
    "\017\072\001\002\000\004\005\026\001\002\000\004\004" +
    "\014\001\002\000\004\004\uffe8\001\002\000\004\021\274" +
    "\001\002\000\004\017\072\001\002\000\004\015\040\001" +
    "\002\000\004\010\042\001\002\000\004\007\044\001\002" +
    "\000\004\040\134\001\002\000\004\005\026\001\002\000" +
    "\004\004\014\001\002\000\004\004\uffe6\001\002\000\004" +
    "\004\014\001\002\000\004\006\034\001\002\000\004\017" +
    "\072\001\002\000\004\005\026\001\002\000\004\004\uffe7" +
    "\001\002\000\004\015\040\001\002\000\004\010\042\001" +
    "\002\000\004\007\044\001\002\000\006\033\u0151\040\134" +
    "\001\002\000\004\005\026\001\002\000\004\004\014\001" +
    "\002\000\004\004\014\001\002\000\004\006\034\001\002" +
    "\000\004\013\021\001\002\000\004\005\026\001\002\000" +
    "\006\002\uffe3\004\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0245\000\030\002\006\071\011\073\014\074\003\100" +
    "\007\103\010\107\004\111\015\113\016\114\012\155\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\021\012\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\040\001\001\000\004\003\024\001\001\000\002\001\001" +
    "\000\030\002\027\072\026\073\030\074\003\100\007\103" +
    "\010\107\004\111\015\113\016\114\012\155\005\001\001" +
    "\000\002\001\001\000\026\002\031\073\032\074\003\100" +
    "\007\103\010\107\004\111\015\113\016\114\012\155\005" +
    "\001\001\000\004\011\021\001\001\000\002\001\001\000" +
    "\006\004\034\011\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\035\001\001\000\004\003\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\042" +
    "\001\001\000\002\001\001\000\004\005\044\001\001\000" +
    "\002\001\001\000\022\021\050\022\047\023\052\024\046" +
    "\025\060\026\045\027\064\030\063\001\001\000\004\005" +
    "\u0240\001\001\000\004\005\u021a\001\001\000\004\005\u020b" +
    "\001\001\000\004\005\u01f0\001\001\000\002\001\001\000" +
    "\004\005\u017c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\u015d\001\001\000\004\005\065\001\001\000" +
    "\004\003\066\001\001\000\006\002\070\115\067\001\001" +
    "\000\004\002\u0159\001\001\000\004\015\072\001\001\000" +
    "\002\001\001\000\004\003\073\001\001\000\006\002\074" +
    "\157\075\001\001\000\004\014\u014c\001\001\000\006\002" +
    "\077\117\076\001\001\000\006\002\117\116\120\001\001" +
    "\000\004\014\101\001\001\000\002\001\001\000\004\013" +
    "\102\001\001\000\004\006\103\001\001\000\004\005\104" +
    "\001\001\000\004\041\105\001\001\000\004\005\107\001" +
    "\001\000\002\001\001\000\004\003\110\001\001\000\004" +
    "\060\112\001\001\000\002\001\001\000\004\002\113\001" +
    "\001\000\004\004\114\001\001\000\004\014\115\001\001" +
    "\000\004\003\116\001\001\000\002\001\001\000\004\014" +
    "\121\001\001\000\002\001\001\000\004\013\122\001\001" +
    "\000\004\006\123\001\001\000\004\005\124\001\001\000" +
    "\004\042\125\001\001\000\004\005\127\001\001\000\002" +
    "\001\001\000\004\003\130\001\001\000\016\036\136\043" +
    "\135\044\134\045\142\046\137\120\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\u012f\123\u0130\001\001\000\006\002\u0118\122\u0119\001\001" +
    "\000\006\002\314\121\315\001\001\000\006\002\240\125" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\144\124\145\001\001\000\002\001\001\000\004\004" +
    "\146\001\001\000\002\001\001\000\004\014\147\001\001" +
    "\000\004\003\150\001\001\000\004\002\151\001\001\000" +
    "\004\004\152\001\001\000\004\015\153\001\001\000\004" +
    "\003\154\001\001\000\006\002\155\134\156\001\001\000" +
    "\004\010\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\161\001\001\000\016\002\164\135\165\143" +
    "\167\150\163\151\166\152\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\172\001\001\000\014\002" +
    "\170\143\171\150\163\151\166\152\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\173\007\172\001" +
    "\001\000\002\001\001\000\004\013\177\001\001\000\004" +
    "\010\175\001\001\000\002\001\001\000\004\003\176\001" +
    "\001\000\002\001\001\000\004\006\200\001\001\000\004" +
    "\005\201\001\001\000\010\056\206\057\202\062\203\001" +
    "\001\000\004\005\230\001\001\000\004\005\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\210\001" +
    "\001\000\002\001\001\000\004\003\211\001\001\000\004" +
    "\066\213\001\001\000\002\001\001\000\004\002\214\001" +
    "\001\000\004\004\215\001\001\000\004\007\216\001\001" +
    "\000\004\003\217\001\001\000\002\001\001\000\004\003" +
    "\221\001\001\000\004\070\223\001\001\000\002\001\001" +
    "\000\004\002\224\001\001\000\004\004\225\001\001\000" +
    "\004\007\226\001\001\000\004\003\227\001\001\000\002" +
    "\001\001\000\004\003\231\001\001\000\004\066\232\001" +
    "\001\000\004\002\233\001\001\000\004\004\234\001\001" +
    "\000\004\007\235\001\001\000\004\003\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\241\001\001" +
    "\000\004\014\242\001\001\000\004\003\243\001\001\000" +
    "\004\002\244\001\001\000\004\004\245\001\001\000\004" +
    "\015\246\001\001\000\004\003\247\001\001\000\006\002" +
    "\250\136\251\001\001\000\004\010\252\001\001\000\002" +
    "\001\001\000\004\003\253\001\001\000\014\002\255\137" +
    "\257\144\260\153\254\154\256\001\001\000\002\001\001" +
    "\000\004\007\263\001\001\000\002\001\001\000\012\002" +
    "\261\144\262\153\254\154\256\001\001\000\002\001\001" +
    "\000\006\004\264\007\263\001\001\000\002\001\001\000" +
    "\004\013\267\001\001\000\004\010\265\001\001\000\004" +
    "\003\266\001\001\000\002\001\001\000\004\006\270\001" +
    "\001\000\004\005\271\001\001\000\006\017\275\040\272" +
    "\001\001\000\004\005\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\276\001\001\000\004\003\277" +
    "\001\001\000\004\060\300\001\001\000\004\002\301\001" +
    "\001\000\004\004\302\001\001\000\004\007\303\001\001" +
    "\000\004\003\304\001\001\000\002\001\001\000\004\003" +
    "\306\001\001\000\004\060\307\001\001\000\004\002\310" +
    "\001\001\000\004\004\311\001\001\000\004\007\312\001" +
    "\001\000\004\003\313\001\001\000\002\001\001\000\004" +
    "\004\316\001\001\000\002\001\001\000\004\014\317\001" +
    "\001\000\004\003\320\001\001\000\004\002\321\001\001" +
    "\000\004\004\322\001\001\000\004\015\323\001\001\000" +
    "\004\003\324\001\001\000\006\002\326\126\325\001\001" +
    "\000\002\001\001\000\004\010\327\001\001\000\004\003" +
    "\330\001\001\000\016\002\332\127\331\140\333\145\334" +
    "\146\335\147\336\001\001\000\014\002\u0113\140\u0114\145" +
    "\334\146\335\147\336\001\001\000\004\007\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\340\001\001\000\004\006\341" +
    "\001\001\000\004\005\342\001\001\000\010\047\346\050" +
    "\347\055\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u010b\001\001\000\004\005" +
    "\361\001\001\000\004\005\351\001\001\000\004\003\352" +
    "\001\001\000\004\067\354\001\001\000\002\001\001\000" +
    "\004\002\355\001\001\000\004\004\356\001\001\000\004" +
    "\007\357\001\001\000\004\003\360\001\001\000\002\001" +
    "\001\000\004\003\362\001\001\000\012\051\370\052\367" +
    "\053\364\054\372\001\001\000\002\001\001\000\004\002" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\u0103\001\001\000\004\002\377\001\001\000\002\001" +
    "\001\000\004\002\373\001\001\000\004\004\374\001\001" +
    "\000\004\007\375\001\001\000\004\003\376\001\001\000" +
    "\002\001\001\000\004\004\u0100\001\001\000\004\007\u0101" +
    "\001\001\000\004\003\u0102\001\001\000\002\001\001\000" +
    "\004\004\u0104\001\001\000\004\007\u0105\001\001\000\004" +
    "\003\u0106\001\001\000\002\001\001\000\004\004\u0108\001" +
    "\001\000\004\007\u0109\001\001\000\004\003\u010a\001\001" +
    "\000\002\001\001\000\004\003\u010c\001\001\000\004\063" +
    "\u010d\001\001\000\004\002\u010f\001\001\000\002\001\001" +
    "\000\004\004\u0110\001\001\000\004\007\u0111\001\001\000" +
    "\004\003\u0112\001\001\000\002\001\001\000\006\004\u0115" +
    "\007\337\001\001\000\002\001\001\000\004\010\u0116\001" +
    "\001\000\004\003\u0117\001\001\000\002\001\001\000\004" +
    "\004\u011a\001\001\000\002\001\001\000\004\014\u011b\001" +
    "\001\000\004\003\u011c\001\001\000\004\002\u011d\001\001" +
    "\000\004\004\u011e\001\001\000\004\015\u011f\001\001\000" +
    "\004\003\u0120\001\001\000\006\002\u0121\130\u0122\001\001" +
    "\000\004\010\u0123\001\001\000\002\001\001\000\004\003" +
    "\u0124\001\001\000\016\002\332\131\u0125\141\u0129\145\u0126" +
    "\146\u0127\147\u0128\001\001\000\014\002\u012a\141\u012b\145" +
    "\u0126\146\u0127\147\u0128\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\u012c\007\337\001\001\000\002\001\001\000\004\010\u012d" +
    "\001\001\000\004\003\u012e\001\001\000\002\001\001\000" +
    "\004\004\u0131\001\001\000\002\001\001\000\004\014\u0132" +
    "\001\001\000\004\003\u0133\001\001\000\004\002\u0134\001" +
    "\001\000\004\004\u0135\001\001\000\004\015\u0136\001\001" +
    "\000\004\003\u0137\001\001\000\006\002\u0139\132\u0138\001" +
    "\001\000\002\001\001\000\004\010\u013a\001\001\000\004" +
    "\003\u013b\001\001\000\020\002\u013f\133\u013e\142\u0142\146" +
    "\u0140\150\u013c\151\u0141\152\u013d\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\002\u0147\142\u0148\146\u0140\150" +
    "\u013c\151\u0141\152\u013d\001\001\000\004\007\u0143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0144\001\001\000\004\006\u0145\001\001\000\004" +
    "\005\u0146\001\001\000\012\050\347\056\206\057\202\062" +
    "\203\001\001\000\006\004\u0149\007\u0143\001\001\000\002" +
    "\001\001\000\004\010\u014a\001\001\000\004\003\u014b\001" +
    "\001\000\002\001\001\000\004\013\u014d\001\001\000\004" +
    "\006\u014e\001\001\000\004\005\u014f\001\001\000\004\031" +
    "\u0151\001\001\000\002\001\001\000\004\005\u0152\001\001" +
    "\000\004\003\u0153\001\001\000\004\060\u0154\001\001\000" +
    "\004\002\u0155\001\001\000\004\004\u0156\001\001\000\004" +
    "\014\u0157\001\001\000\004\003\u0158\001\001\000\002\001" +
    "\001\000\004\004\u015a\001\001\000\004\011\u015b\001\001" +
    "\000\004\003\u015c\001\001\000\002\001\001\000\004\003" +
    "\u015e\001\001\000\006\002\u0160\156\u015f\001\001\000\004" +
    "\002\u0169\001\001\000\004\015\u0161\001\001\000\004\003" +
    "\u0162\001\001\000\006\002\074\157\u0163\001\001\000\006" +
    "\002\077\117\u0164\001\001\000\004\002\u0165\001\001\000" +
    "\004\004\u0166\001\001\000\004\015\u0167\001\001\000\004" +
    "\003\u0168\001\001\000\002\001\001\000\004\004\u016a\001" +
    "\001\000\004\011\u016b\001\001\000\004\003\u016c\001\001" +
    "\000\002\001\001\000\004\003\u016e\001\001\000\006\002" +
    "\u016f\112\u0170\001\001\000\004\015\u0175\001\001\000\004" +
    "\002\u0171\001\001\000\004\004\u0172\001\001\000\004\011" +
    "\u0173\001\001\000\004\003\u0174\001\001\000\002\001\001" +
    "\000\004\003\u0176\001\001\000\006\002\074\157\u0177\001" +
    "\001\000\004\002\u0178\001\001\000\004\004\u0179\001\001" +
    "\000\004\015\u017a\001\001\000\004\003\u017b\001\001\000" +
    "\002\001\001\000\004\003\u017d\001\001\000\006\002\u017f" +
    "\075\u017e\001\001\000\006\002\u01d5\167\u01d4\001\001\000" +
    "\004\015\u0180\001\001\000\004\003\u0181\001\001\000\030" +
    "\002\u0185\076\u0182\077\u018a\157\u0189\160\u0186\161\u018b\162" +
    "\u0184\163\u0183\164\u0187\165\u0188\166\u018c\001\001\000\026" +
    "\002\u01cf\077\u01d0\157\u0189\160\u0186\161\u018b\162\u0184\163" +
    "\u0183\164\u0187\165\u0188\166\u018c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u018d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u018e\001\001\000\004\006\u018f\001\001\000\004" +
    "\005\u0190\001\001\000\022\031\u0151\032\u0192\033\u0193\034" +
    "\u0198\035\u0196\036\u019a\037\u0195\040\u0197\001\001\000\002" +
    "\001\001\000\004\005\u01c8\001\001\000\004\005\u01c1\001" +
    "\001\000\002\001\001\000\004\005\u01ba\001\001\000\004" +
    "\005\u01b3\001\001\000\004\005\u01ac\001\001\000\004\005" +
    "\u01a4\001\001\000\002\001\001\000\004\005\u019d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u019e\001" +
    "\001\000\004\063\u019f\001\001\000\004\002\u01a0\001\001" +
    "\000\004\004\u01a1\001\001\000\004\014\u01a2\001\001\000" +
    "\004\003\u01a3\001\001\000\002\001\001\000\004\003\u01a5" +
    "\001\001\000\004\064\u01a7\001\001\000\002\001\001\000" +
    "\004\002\u01a8\001\001\000\004\004\u01a9\001\001\000\004" +
    "\014\u01aa\001\001\000\004\003\u01ab\001\001\000\002\001" +
    "\001\000\004\003\u01ad\001\001\000\004\060\u01ae\001\001" +
    "\000\004\002\u01af\001\001\000\004\004\u01b0\001\001\000" +
    "\004\014\u01b1\001\001\000\004\003\u01b2\001\001\000\002" +
    "\001\001\000\004\003\u01b4\001\001\000\004\060\u01b5\001" +
    "\001\000\004\002\u01b6\001\001\000\004\004\u01b7\001\001" +
    "\000\004\014\u01b8\001\001\000\004\003\u01b9\001\001\000" +
    "\002\001\001\000\004\003\u01bb\001\001\000\004\060\u01bc" +
    "\001\001\000\004\002\u01bd\001\001\000\004\004\u01be\001" +
    "\001\000\004\014\u01bf\001\001\000\004\003\u01c0\001\001" +
    "\000\002\001\001\000\004\003\u01c2\001\001\000\004\064" +
    "\u01c3\001\001\000\004\002\u01c4\001\001\000\004\004\u01c5" +
    "\001\001\000\004\014\u01c6\001\001\000\004\003\u01c7\001" +
    "\001\000\002\001\001\000\004\003\u01c9\001\001\000\004" +
    "\060\u01ca\001\001\000\004\002\u01cb\001\001\000\004\004" +
    "\u01cc\001\001\000\004\014\u01cd\001\001\000\004\003\u01ce" +
    "\001\001\000\002\001\001\000\006\004\u01d1\014\u018d\001" +
    "\001\000\002\001\001\000\004\015\u01d2\001\001\000\004" +
    "\003\u01d3\001\001\000\002\001\001\000\004\002\u01ec\001" +
    "\001\000\006\004\u01d6\017\u01d7\001\001\000\004\011\u01ea" +
    "\001\001\000\004\003\u01d8\001\001\000\010\002\u01da\170" +
    "\u01d9\171\u01db\001\001\000\006\002\u01e5\171\u01e6\001\001" +
    "\000\004\016\u01dc\001\001\000\002\001\001\000\004\020" +
    "\u01df\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u01e0\001\001\000\004\065\u01e2\001\001\000\002\001" +
    "\001\000\004\004\u01e3\001\001\000\004\003\u01e4\001\001" +
    "\000\002\001\001\000\006\004\u01e7\016\u01dc\001\001\000" +
    "\002\001\001\000\004\017\u01e8\001\001\000\004\003\u01e9" +
    "\001\001\000\002\001\001\000\004\003\u01eb\001\001\000" +
    "\002\001\001\000\004\004\u01ed\001\001\000\004\011\u01ee" +
    "\001\001\000\004\003\u01ef\001\001\000\002\001\001\000" +
    "\004\003\u01f1\001\001\000\006\002\u01f3\104\u01f2\001\001" +
    "\000\004\002\u0207\001\001\000\004\015\u01f4\001\001\000" +
    "\004\003\u01f5\001\001\000\022\002\u01f7\105\u01fc\106\u01fa" +
    "\157\u01fb\163\u01f6\164\u01f8\165\u01f9\166\u01fd\001\001\000" +
    "\002\001\001\000\004\014\u0201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\u01ff\106\u01fe\157\u01fb\163\u01f6\164\u01f8\165\u01f9" +
    "\166\u01fd\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\u0200\014\u0201\001\001\000\004\015\u0205\001\001" +
    "\000\004\013\u0202\001\001\000\004\006\u0203\001\001\000" +
    "\004\005\u0204\001\001\000\014\031\u0151\032\u0192\033\u0193" +
    "\034\u0198\035\u0196\001\001\000\004\003\u0206\001\001\000" +
    "\002\001\001\000\004\004\u0208\001\001\000\004\011\u0209" +
    "\001\001\000\004\003\u020a\001\001\000\002\001\001\000" +
    "\004\003\u020c\001\001\000\006\002\u020d\110\u020e\001\001" +
    "\000\004\015\u0213\001\001\000\004\002\u020f\001\001\000" +
    "\004\004\u0210\001\001\000\004\011\u0211\001\001\000\004" +
    "\003\u0212\001\001\000\002\001\001\000\004\003\u0214\001" +
    "\001\000\006\002\074\157\u0215\001\001\000\004\002\u0216" +
    "\001\001\000\004\004\u0217\001\001\000\004\015\u0218\001" +
    "\001\000\004\003\u0219\001\001\000\002\001\001\000\004" +
    "\003\u021b\001\001\000\006\002\u021c\101\u021d\001\001\000" +
    "\004\015\u0222\001\001\000\004\002\u021e\001\001\000\004" +
    "\004\u021f\001\001\000\004\011\u0220\001\001\000\004\003" +
    "\u0221\001\001\000\002\001\001\000\004\003\u0223\001\001" +
    "\000\010\002\u0224\157\u0226\160\u0225\001\001\000\004\014" +
    "\u023c\001\001\000\006\002\074\157\u0237\001\001\000\006" +
    "\002\u0227\160\u0228\001\001\000\006\004\u022f\014\u0230\001" +
    "\001\000\004\002\u0229\001\001\000\004\004\u022a\001\001" +
    "\000\004\015\u022b\001\001\000\004\003\u022c\001\001\000" +
    "\006\002\u022e\167\u022d\001\001\000\002\001\001\000\004" +
    "\017\u01d7\001\001\000\004\015\u0234\001\001\000\004\013" +
    "\u0231\001\001\000\004\006\u0232\001\001\000\004\005\u0233" +
    "\001\001\000\004\036\u019a\001\001\000\004\003\u0235\001" +
    "\001\000\006\002\u022e\167\u0236\001\001\000\002\001\001" +
    "\000\004\002\u0238\001\001\000\004\004\u0239\001\001\000" +
    "\004\015\u023a\001\001\000\004\003\u023b\001\001\000\002" +
    "\001\001\000\004\013\u023d\001\001\000\004\006\u023e\001" +
    "\001\000\004\005\u023f\001\001\000\006\031\u0151\036\u019a" +
    "\001\001\000\004\003\u0241\001\001\000\006\002\070\115" +
    "\u0242\001\001\000\004\002\u0243\001\001\000\004\004\u0244" +
    "\001\001\000\004\011\u0245\001\001\000\004\003\u0246\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    VentanaAppCliente ventana;
    //ManejadorVerificacionObligatorios manejadorVerificaciones;



    public parser(miLexer lexer, VentanaAppCliente ventana) {
		super(lexer);
        this.ventana=ventana;
 
	}


    public void syntax_error(Symbol cur_token) {
            System.out.println("Error sobrecargado <" + cur_token.value + "> || "   
            + cur_token.sym+" \n");
            //ventana.agregarTexto("     *** ERROR: Comando invalido ***");
            //ventana.agregarTexto("     *** Componente:  \"" + cur_token.value + "\" no reconocido");  
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente: " + s.value + 
        " no reconocido.\n");

        ventana.escribirEnTextAreaDeErroresSintacticos("Error síntactico irrecuperable en: \n         Línea " + 
        (s.left)+ "\n         Columna "+s.right+"\n         Componente: " + s.value + 
        " no reconocido.\n"); 
        
    }  

    

        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= accion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= MenorQ Acciones MayorQ conjuntoAcciones MenorQ Diagonal Acciones MayorQ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // conjuntoAcciones ::= accion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoAcciones",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // conjuntoAcciones ::= conjuntoAcciones accion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoAcciones",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // accion ::= nuevoSitioWeb 
            {
              String RESULT =null;
		 
                    ventana.escribirEnTextAreaDeRespuestaDelServidor("Servidor: Analisis de accion: NUEVO_SITIO_WEB"); 
                    boolean resultado = ManejadorVerificacionObligatorios.verificarObligatorios_NuevoSitioWeb();

                    String textoAEnviar = ManejadorVerificacionObligatorios.generarEstructuraSitioWeb();
                    ventana.enviarTextoAlServidor(textoAEnviar);

                    ventana.escribirRespuestaSegunResultado(resultado,"OK: Estructura valida","ERROR: No se incluyeron los parametros obligatorios");
                    ManejadorVerificacionObligatorios.limpiarParametros();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // accion ::= borrarSitioWeb 
            {
              String RESULT =null;
		 

                    ventana.escribirEnTextAreaDeRespuestaDelServidor("Analisis de accion: BORRAR_SITIO_WEB"); 
                    boolean resultado = ManejadorVerificacionObligatorios.verificarObligatorios_BorrarSitioWeb();

                    String textoAEnviar = ManejadorVerificacionObligatorios.generarEstructuraBorrarSitioWeb();
                    ventana.enviarTextoAlServidor(textoAEnviar);

                    ventana.escribirRespuestaSegunResultado(resultado,"OK: Estructura valida","ERROR: No se incluyeron los parametros obligatorios");
                    ManejadorVerificacionObligatorios.limpiarParametros();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // accion ::= nuevaPagina 
            {
              String RESULT =null;
		   
                    ventana.escribirEnTextAreaDeRespuestaDelServidor("Servidor: Analisis de accion: NUEVA_PAGINA");
                    boolean resultado = ManejadorVerificacionObligatorios.verificarObligatorios_NuevaPagina();

                    String textoAEnviar = ManejadorVerificacionObligatorios.generarEstructuraPaginaWeb();
                    ventana.enviarTextoAlServidor(textoAEnviar);

                    ventana.escribirRespuestaSegunResultado(resultado,"OK: Estructura valida","ERROR: No se incluyo alguno los parametros obligatorios");
                    ManejadorVerificacionObligatorios.limpiarParametros();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // accion ::= modificarPagina 
            {
              String RESULT =null;
		 
                    ventana.escribirEnTextAreaDeRespuestaDelServidor("Analisis de accion: MODIFICAR_PAGINAS"); 
                    boolean resultado = ManejadorVerificacionObligatorios.verificarObligatorios_ModificarPagina();



                    ventana.escribirRespuestaSegunResultado(resultado,"OK: Estructura valida","ERROR: No se incluyeron los parametros obligatorios");
                    ManejadorVerificacionObligatorios.limpiarParametros();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // accion ::= borrarPagina 
            {
              String RESULT =null;
		  
                    ventana.escribirEnTextAreaDeRespuestaDelServidor("Servidor: Analisis de accion: BORRAR_PAGINA"); 
                    boolean resultado = ManejadorVerificacionObligatorios.verificarObligatorios_BorrarPagina();

                    String textoAEnviar = ManejadorVerificacionObligatorios.generarEstructuraBorrarPaginaWeb();
                    ventana.enviarTextoAlServidor(textoAEnviar);

                    ventana.escribirRespuestaSegunResultado(resultado,"OK: Estructura valida","ERROR: No se incluyeron los parametros obligatorios");
                    ManejadorVerificacionObligatorios.limpiarParametros();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // accion ::= agregarComponente 
            {
              String RESULT =null;
		 
                    System.out.printf(">>>>>>>>>>>>>>>>>>>>>> Se completo Agregar Componente\n\n");  
                    ventana.escribirEnTextAreaDeRespuestaDelServidor("Analisis de accion: AGREGAR_COMPONENTE"); 
                    ventana.escribirEnTextAreaDeRespuestaDelServidor("       OK: Accion Completada"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // accion ::= modificarComponente 
            {
              String RESULT =null;
		 
                    System.out.printf(">>>>>>>>>>>>>>>>>>>>>> Se completo Modificar Componente\n\n");  
                    ventana.escribirEnTextAreaDeRespuestaDelServidor("Analisis de accion: MODIFICAR_COMPONENTE"); 
                    ventana.escribirEnTextAreaDeRespuestaDelServidor("      OK: Estructura valida"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // accion ::= borrarComponente 
            {
              String RESULT =null;
		 
                    System.out.printf(">>>>>>>>>>>>>>>>>>>>>> Se completo Borrar Componente\n\n");  
                    ventana.escribirEnTextAreaDeRespuestaDelServidor("Analisis de accion: BORRAR_COMPONENTE"); 
                    ventana.escribirEnTextAreaDeRespuestaDelServidor("      OK: Estructura valida"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accion",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nuevoSitioWeb ::= MenorQ Accion Nombre Igual Comilla NuevoSitioWeb Comilla MayorQ P0s MenorQ Diagonal Accion MayorQ 
            {
              String RESULT =null;
		 System.out.printf("nuevoSitioWeb ::=  a un monton\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevoSitioWeb",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // P0s ::= MenorQ Parametros MayorQ P01 MenorQ Diagonal Parametros MayorQ 
            {
              String RESULT =null;
		 System.out.printf("P0s ::= MenorQ Parametros MayorQ P01 MenorQ Diagonal Parametros MayorQ\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P0s",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // P01 ::= parametrosParaNuevoSitioWeb 
            {
              String RESULT =null;
		 System.out.printf("P01 ::= parametrosParaNuevoSitioWeb\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P01",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // P01 ::= P01 parametrosParaNuevoSitioWeb 
            {
              String RESULT =null;
		 System.out.printf("P01 ::= P01 parametrosParaNuevoSitioWeb\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P01",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // borrarSitioWeb ::= MenorQ Accion Nombre Igual Comilla BorrarSitioWeb Comilla MayorQ PBSW MenorQ Diagonal Accion MayorQ 
            {
              String RESULT =null;
		 System.out.printf("nuevoSitioWeb ::=  a un monton\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("borrarSitioWeb",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PBSW ::= MenorQ Parametros MayorQ ParametroId MenorQ Diagonal Parametros MayorQ 
            {
              String RESULT =null;
		 System.out.printf("P0s ::= MenorQ Parametros MayorQ P01 MenorQ Diagonal Parametros MayorQ\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBSW",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nuevaPagina ::= MenorQ Accion Nombre Igual Comilla NuevaPagina Comilla MayorQ Ps Es MenorQ Diagonal Accion MayorQ 
            {
              String RESULT =null;
		 System.out.printf("s1 --> Ps Es\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevaPagina",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nuevaPagina ::= MenorQ Accion Nombre Igual Comilla NuevaPagina Comilla MayorQ Ps MenorQ Diagonal Accion MayorQ 
            {
              String RESULT =null;
		 System.out.printf("s1 --> Ps\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevaPagina",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Ps ::= MenorQ Parametros MayorQ P1 MenorQ Diagonal Parametros MayorQ 
            {
              String RESULT =null;
		 System.out.printf("Ps --> P1 parametrosParaNuevaPagina P3\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ps",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // P1 ::= parametrosParaNuevaPagina 
            {
              String RESULT =null;
		 System.out.printf("P1 ::= parametrosParaNuevaPagina\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // P1 ::= P1 parametrosParaNuevaPagina 
            {
              String RESULT =null;
		 System.out.printf("P1 ::= P1 parametrosParaNuevaPagina\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P1",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // modificarPagina ::= MenorQ Accion Nombre Igual Comilla ModificarPagina Comilla MayorQ ParametrosYEtiquetas MenorQ Diagonal Accion MayorQ 
            {
              String RESULT =null;
		 System.out.printf("modificarPagina --> PE Es\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificarPagina",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParametrosYEtiquetas ::= MenorQ Parametros MayorQ ParametroId ParametroTitulo MenorQ Diagonal Parametros MayorQ Es 
            {
              String RESULT =null;
		 

                                    String textoAEnviar = ManejadorVerificacionObligatorios.generarEstructuraModificarPaginaWeb1();
                                    System.out.printf(textoAEnviar);                            
                                    ventana.enviarTextoAlServidor(textoAEnviar);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosYEtiquetas",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParametrosYEtiquetas ::= MenorQ Parametros MayorQ ParametroTitulo ParametroId MenorQ Diagonal Parametros MayorQ 
            {
              String RESULT =null;
		 
                                    System.out.printf("Ps --> P1 parametrosParaNuevaPagina P3\n\n"); 
                                    String textoAEnviar = ManejadorVerificacionObligatorios.generarEstructuraModificarPaginaWeb2();
                                    System.out.printf(textoAEnviar);
                                    ventana.enviarTextoAlServidor(textoAEnviar);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosYEtiquetas",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParametrosYEtiquetas ::= MenorQ Parametros MayorQ ParametroId MenorQ Diagonal Parametros MayorQ Es 
            {
              String RESULT =null;
		 
                                    System.out.printf("Ps --> P1 parametrosParaNuevaPagina P3\n\n"); 
                                    String textoAEnviar = ManejadorVerificacionObligatorios.generarEstructuraModificarPaginaWeb3();
                                    System.out.printf(textoAEnviar);
                                    ventana.enviarTextoAlServidor(textoAEnviar);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosYEtiquetas",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // borrarPagina ::= MenorQ Accion Nombre Igual Comilla BorrarPagina Comilla MayorQ PBP MenorQ Diagonal Accion MayorQ 
            {
              String RESULT =null;
		 System.out.printf("nuevoSitioWeb ::=  a un monton\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("borrarPagina",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PBP ::= MenorQ Parametros MayorQ ParametroId MenorQ Diagonal Parametros MayorQ 
            {
              String RESULT =null;
		 System.out.printf("P0s ::= MenorQ Parametros MayorQ P01 MenorQ Diagonal Parametros MayorQ\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PBP",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // agregarComponente ::= MenorQ Accion Nombre Igual Comilla AgregarComponente Comilla MayorQ PsAC MenorQ Diagonal Accion MayorQ 
            {
              String RESULT =null;
		 System.out.printf("agregarComponente ::=  a un monton\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregarComponente",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // modificarComponente ::= MenorQ Accion Nombre Igual Comilla ModificarComponente Comilla MayorQ PsAC MenorQ Diagonal Accion MayorQ 
            {
              String RESULT =null;
		 System.out.printf("agregarComponente ::=  a un monton\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificarComponente",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PsAC ::= MenorQ Parametros MayorQ ParametroId ParametroPagina ParametroClase 
            {
              String RESULT =null;
		 System.out.printf("PsAC ::= a un monton\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PsAC",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ParametroClase ::= MenorQ Parametro Nombre Igual Comilla Clase Comilla MayorQ C 
            {
              String RESULT =null;
		 System.out.printf("ParametroPagina ::= \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametroClase",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // C ::= Titulo CPT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // C ::= Parrafo CPP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // C ::= Imagen CPI 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // C ::= Video CPV 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // C ::= Menu CPM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CPT ::= MenorQ Diagonal Parametro MayorQ MenorQ Diagonal Parametros MayorQ AT1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPT",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CPP ::= MenorQ Diagonal Parametro MayorQ MenorQ Diagonal Parametros MayorQ AP1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPP",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CPI ::= MenorQ Diagonal Parametro MayorQ MenorQ Diagonal Parametros MayorQ AI1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPI",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CPV ::= MenorQ Diagonal Parametro MayorQ MenorQ Diagonal Parametros MayorQ AV1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPV",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CPM ::= MenorQ Diagonal Parametro MayorQ MenorQ Diagonal Parametros MayorQ AM1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CPM",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AT1 ::= MenorQ Atributos MayorQ AT2 MenorQ Diagonal Atributos MayorQ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT1",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AT2 ::= atributosParaTitulo 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT2",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AT2 ::= AT2 atributosParaTitulo 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT2",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AP1 ::= MenorQ Atributos MayorQ AP2 MenorQ Diagonal Atributos MayorQ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP1",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AP2 ::= atributosParaParrafo 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP2",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AP2 ::= AP2 atributosParaParrafo 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AP2",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AI1 ::= MenorQ Atributos MayorQ AI2 MenorQ Diagonal Atributos MayorQ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AI1",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AI2 ::= atributosParaImagen 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AI2",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AI2 ::= AI2 atributosParaImagen 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AI2",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AV1 ::= MenorQ Atributos MayorQ AV2 MenorQ Diagonal Atributos MayorQ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AV1",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AV2 ::= atributosParaVideo 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AV2",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AV2 ::= AV2 atributosParaVideo 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AV2",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AM1 ::= MenorQ Atributos MayorQ AM2 MenorQ Diagonal Atributos MayorQ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AM1",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AM2 ::= atributosParaMenu 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AM2",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AM2 ::= AM2 atributosParaMenu 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AM2",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // borrarComponente ::= MenorQ Accion Nombre Igual Comilla BorrarComponente Comilla MayorQ PsBC MenorQ Diagonal Accion MayorQ 
            {
              String RESULT =null;
		 System.out.printf("agregarComponente ::=  a un monton\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("borrarComponente",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PsBC ::= MenorQ Parametros MayorQ ParametroId ParametroPagina MenorQ Diagonal Parametros MayorQ 
            {
              String RESULT =null;
		 System.out.printf("PsAC ::= a un monton\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PsBC",108, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atributosParaTitulo ::= atributoTexto 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaTitulo",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atributosParaTitulo ::= atributoAlineacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaTitulo",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atributosParaTitulo ::= atributoColor 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaTitulo",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atributosParaParrafo ::= atributoTexto 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaParrafo",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // atributosParaParrafo ::= atributoAlineacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaParrafo",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // atributosParaParrafo ::= atributoColor 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaParrafo",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // atributosParaImagen ::= atributoOrigen 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaImagen",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // atributosParaImagen ::= atributoAlineacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaImagen",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // atributosParaImagen ::= atributoAltura 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaImagen",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // atributosParaImagen ::= atributoAncho 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaImagen",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // atributosParaVideo ::= atributoOrigen 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaVideo",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // atributosParaVideo ::= atributoAltura 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaVideo",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atributosParaVideo ::= atributoAncho 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaVideo",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // atributosParaMenu ::= atributoPadre 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaMenu",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // atributosParaMenu ::= atributoEtiquetas 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosParaMenu",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // atributoTexto ::= MenorQ Atributo Nombre Igual Comilla Texto Comilla MayorQ Oracion MenorQ Diagonal Atributo MayorQ 
            {
              String RESULT =null;
		 System.out.printf("atributoTexto ::=  \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoTexto",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // atributoAlineacion ::= MenorQ Atributo Nombre Igual Comilla Alineacion Comilla MayorQ Centrar MenorQ Diagonal Atributo MayorQ 
            {
              String RESULT =null;
		 System.out.printf("atributoTexto ::=  \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoAlineacion",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // atributoAlineacion ::= MenorQ Atributo Nombre Igual Comilla Alineacion Comilla MayorQ Izquierda MenorQ Diagonal Atributo MayorQ 
            {
              String RESULT =null;
		 System.out.printf("atributoTexto ::=  \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoAlineacion",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // atributoAlineacion ::= MenorQ Atributo Nombre Igual Comilla Alineacion Comilla MayorQ Derecha MenorQ Diagonal Atributo MayorQ 
            {
              String RESULT =null;
		 System.out.printf("atributoTexto ::=  \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoAlineacion",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // atributoAlineacion ::= MenorQ Atributo Nombre Igual Comilla Alineacion Comilla MayorQ Justificar MenorQ Diagonal Atributo MayorQ 
            {
              String RESULT =null;
		 System.out.printf("atributoTexto ::=  \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoAlineacion",100, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // atributoColor ::= MenorQ Atributo Nombre Igual Comilla Color Comilla MayorQ Hexadecimal MenorQ Diagonal Atributo MayorQ 
            {
              String RESULT =null;
		 System.out.printf("atributoTexto ::=  \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoColor",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // atributoOrigen ::= MenorQ Atributo Nombre Igual Comilla Origen Comilla MayorQ Url MenorQ Diagonal Atributo MayorQ 
            {
              String RESULT =null;
		 System.out.printf("atributoTexto ::=  \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoOrigen",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // atributoAltura ::= MenorQ Atributo Nombre Igual Comilla Altura Comilla MayorQ Entero MenorQ Diagonal Atributo MayorQ 
            {
              String RESULT =null;
		 System.out.printf("atributoTexto ::=  \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoAltura",103, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // atributoAncho ::= MenorQ Atributo Nombre Igual Comilla Ancho Comilla MayorQ Entero MenorQ Diagonal Atributo MayorQ 
            {
              String RESULT =null;
		 System.out.printf("atributoTexto ::=  \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoAncho",104, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // atributoPadre ::= MenorQ Atributo Nombre Igual Comilla Padre Comilla MayorQ Identificador MenorQ Diagonal Atributo MayorQ 
            {
              String RESULT =null;
		 System.out.printf("atributoTexto ::=  \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoPadre",105, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // atributoEtiquetas ::= MenorQ Atributo Nombre Igual Comilla Etiquetas Comilla MayorQ Identificador MenorQ Diagonal Atributo MayorQ 
            {
              String RESULT =null;
		 System.out.printf("atributoTexto ::=  \n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributoEtiquetas",106, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametrosParaNuevoSitioWeb ::= ParametroId 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevoSitioWeb",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametrosParaNuevoSitioWeb ::= ParametroUsuarioCreacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevoSitioWeb",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametrosParaNuevoSitioWeb ::= ParametroFechaCreacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevoSitioWeb",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametrosParaNuevoSitioWeb ::= ParametroFechaModificacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevoSitioWeb",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametrosParaNuevoSitioWeb ::= ParametroUsuarioModificacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevoSitioWeb",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametrosParaNuevaPagina ::= ParametroId 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevaPagina",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametrosParaNuevaPagina ::= ParametroTitulo 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevaPagina",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametrosParaNuevaPagina ::= ParametroSitio 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevaPagina",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametrosParaNuevaPagina ::= ParametroPadre 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevaPagina",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametrosParaNuevaPagina ::= ParametroUsuarioCreacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevaPagina",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametrosParaNuevaPagina ::= ParametroFechaCreacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevaPagina",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametrosParaNuevaPagina ::= ParametroFechaModificacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevaPagina",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametrosParaNuevaPagina ::= ParametroUsuarioModificacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaNuevaPagina",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametrosParaModificarPagina ::= ParametroId 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaModificarPagina",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametrosParaModificarPagina ::= ParametroSitio 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaModificarPagina",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametrosParaModificarPagina ::= ParametroPadre 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaModificarPagina",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametrosParaModificarPagina ::= ParametroUsuarioCreacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaModificarPagina",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametrosParaModificarPagina ::= ParametroFechaCreacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaModificarPagina",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametrosParaModificarPagina ::= ParametroFechaModificacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaModificarPagina",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametrosParaModificarPagina ::= ParametroUsuarioModificacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosParaModificarPagina",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ParametroId ::= MenorQ Parametro Nombre Igual Comilla Id Comilla MayorQ Identificador MenorQ Diagonal Parametro MayorQ 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.printf("ParametroId ::= \n\n"); ManejadorVerificacionObligatorios.ID = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametroId",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ParametroTitulo ::= MenorQ Parametro Nombre Igual Comilla Titulo Comilla MayorQ Oracion MenorQ Diagonal Parametro MayorQ 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.printf("ParametroTitulo ::=\n\n"); ManejadorVerificacionObligatorios.TITULO = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametroTitulo",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ParametroSitio ::= MenorQ Parametro Nombre Igual Comilla Sitio Comilla MayorQ Identificador MenorQ Diagonal Parametro MayorQ 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.printf("ParametroSitio ::= pijo\n\n"); ManejadorVerificacionObligatorios.SITIO = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametroSitio",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ParametroPadre ::= MenorQ Parametro Nombre Igual Comilla Padre Comilla MayorQ Identificador MenorQ Diagonal Parametro MayorQ 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.printf("ParametroPadre ::= un pijo\n\n"); ManejadorVerificacionObligatorios.PADRE = i;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametroPadre",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ParametroUsuarioCreacion ::= MenorQ Parametro Nombre Igual Comilla UsuarioCreacion Comilla MayorQ Identificador MenorQ Diagonal Parametro MayorQ 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.printf("ParametroUsuarioCreacion ::= un pijo\n\n"); ManejadorVerificacionObligatorios.USUARIO_CREACION = i;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametroUsuarioCreacion",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ParametroFechaCreacion ::= MenorQ Parametro Nombre Igual Comilla FechaCreacion Comilla MayorQ Fecha MenorQ Diagonal Parametro MayorQ 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.printf("ParametroFechaCreacion ::= un pijo\n\n"); ManejadorVerificacionObligatorios.FECHA_CREACION = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametroFechaCreacion",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ParametroFechaModificacion ::= MenorQ Parametro Nombre Igual Comilla FechaModificacion Comilla MayorQ Fecha MenorQ Diagonal Parametro MayorQ 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.printf("ParametroFechaModificacion ::=un pijo\n\n"); ManejadorVerificacionObligatorios.FECHA_MODIFICACION = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametroFechaModificacion",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ParametroUsuarioModificacion ::= MenorQ Parametro Nombre Igual Comilla UsuarioModificacion Comilla MayorQ Identificador MenorQ Diagonal Parametro MayorQ 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.printf("ParametroUsuarioModificacion ::= un pijo\n\n"); ManejadorVerificacionObligatorios.USUARIO_MODIFICACION = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametroUsuarioModificacion",116, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ParametroPagina ::= MenorQ Parametro Nombre Igual Comilla Pagina Comilla MayorQ Identificador MenorQ Diagonal Parametro MayorQ 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.printf("ParametroPagina ::= \n\n"); ManejadorVerificacionObligatorios.PAGINA = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametroPagina",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Es ::= MenorQ Etiquetas MayorQ E1 MenorQ Diagonal Etiquetas MayorQ 
            {
              String RESULT =null;
		 System.out.printf("Es ::=\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Es",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E1 ::= E2 
            {
              String RESULT =null;
		 System.out.printf("E1 ::= E2 E2\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E1 ::= E1 E2 
            {
              String RESULT =null;
		 System.out.printf("E1 ::= E1 E2\n\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",118, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E2 ::= MenorQ Etiqueta Valor Igual Id_Etiqueta Diagonal MayorQ 
            {
              String RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ei = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.printf("E2 ::= un pijoi\n\n"); 
                   ManejadorVerificacionObligatorios.listadoEtiquetas.add(ei);
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MenorQ ::= MENOR_Q 
            {
              String RESULT =null;
		int meqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String meq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = meq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MenorQ",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MayorQ ::= MAYOR_Q 
            {
              String RESULT =null;
		int maqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String maq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = maq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MayorQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Diagonal ::= DIAGONAL 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Diagonal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Comilla ::= COMILLA 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comilla",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Atributo ::= ATRIBUTO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Atributo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Atributos ::= ATRIBUTOS 
            {
              String RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Atributos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Accion ::= ACCION 
            {
              String RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ac; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Accion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Acciones ::= ACCIONES 
            {
              String RESULT =null;
		int acsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String acs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = acs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Acciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Nombre ::= NOMBRE 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Nombre",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Parametro ::= PARAMETRO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Parametros ::= PARAMETROS 
            {
              String RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ps; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Etiqueta ::= ETIQUETA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Etiqueta",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Etiquetas ::= ETIQUETAS 
            {
              String RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String es = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Etiquetas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Valor ::= VALOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NuevoSitioWeb ::= NUEVO_SITIO_WEB 
            {
              String RESULT =null;
		int nswleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nswright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nsw = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nsw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NuevoSitioWeb",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // BorrarSitioWeb ::= BORRAR_SITIO_WEB 
            {
              String RESULT =null;
		int bswleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bswright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bsw = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bsw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BorrarSitioWeb",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NuevaPagina ::= NUEVA_PAGINA 
            {
              String RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String np = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = np; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NuevaPagina",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ModificarPagina ::= MODIFICAR_PAGINA 
            {
              String RESULT =null;
		int mpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ModificarPagina",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // BorrarPagina ::= BORRAR_PAGINA 
            {
              String RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BorrarPagina",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // AgregarComponente ::= AGREGAR_COMPONENTE 
            {
              String RESULT =null;
		int acpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String acp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = acp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AgregarComponente",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ModificarComponente ::= MODIFICAR_COMPONENTE 
            {
              String RESULT =null;
		int mcpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mcp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mcp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ModificarComponente",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // BorrarComponente ::= BORRAR_COMPONENTE 
            {
              String RESULT =null;
		int bcpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bcpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bcp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bcp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BorrarComponente",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Id",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // UsuarioCreacion ::= USUARIO_CREACION 
            {
              String RESULT =null;
		int ucleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ucright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String uc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = uc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UsuarioCreacion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FechaCreacion ::= FECHA_CREACION 
            {
              String RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FechaCreacion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // FechaModificacion ::= FECHA_MODIFICACION 
            {
              String RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FechaModificacion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // UsuarioModificacion ::= USUARIO_MODIFICACION 
            {
              String RESULT =null;
		int umleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int umright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String um = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = um; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UsuarioModificacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Titulo ::= TITULO 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Titulo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Sitio ::= SITIO 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sitio",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Padre ::= PADRE 
            {
              String RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Padre",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Pagina ::= PAGINA 
            {
              String RESULT =null;
		int pagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pag; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pagina",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Clase ::= CLASE 
            {
              String RESULT =null;
		int claleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int claright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cla; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Clase",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Parrafo ::= PARRAFO 
            {
              String RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String par = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = par; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parrafo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Imagen ::= IMAGEN 
            {
              String RESULT =null;
		int imgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String img = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = img; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imagen",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Video ::= VIDEO 
            {
              String RESULT =null;
		int vidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vidright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vid; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Video",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Menu ::= MENU 
            {
              String RESULT =null;
		int menuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int menuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String menu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = menu; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Menu",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Texto ::= TEXTO 
            {
              String RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Texto",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Alineacion ::= ALINEACION 
            {
              String RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ali = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ali; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Alineacion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Centrar ::= CENTRAR 
            {
              String RESULT =null;
		int cenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cen; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Centrar",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Izquierda ::= IZQUIERDA 
            {
              String RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String iz = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = iz; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Izquierda",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Derecha ::= DERECHA 
            {
              String RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String der = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = der; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Derecha",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Justificar ::= JUSTIFICAR 
            {
              String RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = j; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Justificar",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Color ::= COLOR 
            {
              String RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = col; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Color",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Altura ::= ALTURA 
            {
              String RESULT =null;
		int altleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int altright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = alt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Altura",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Ancho ::= ANCHO 
            {
              String RESULT =null;
		int anleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int anright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String an = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = an; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ancho",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Identificador ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ide; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identificador",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Igual ::= IGUAL 
            {
              String RESULT =null;
		int igleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int igright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ig; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Igual",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Origen ::= ORIGEN 
            {
              String RESULT =null;
		int ogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String og = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = og; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Origen",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Dato ::= DATO 
            {
              String RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dat = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dato",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Oracion ::= ORACION 
            {
              String RESULT =null;
		int oraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ora = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ora; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Oracion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Fecha ::= FECHA 
            {
              String RESULT =null;
		int fechleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fechright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fech = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fech; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fecha",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Id_Etiqueta ::= ID_ETIQUETA 
            {
              String RESULT =null;
		int idetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idetright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idet = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = idet; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Id_Etiqueta",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Entero ::= ENTERO 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entero",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Hexadecimal ::= HEXADECIMAL 
            {
              String RESULT =null;
		int hexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String hex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = hex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Hexadecimal",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Url ::= URL 
            {
              String RESULT =null;
		int hexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String hex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = hex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Url",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
