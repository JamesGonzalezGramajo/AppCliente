/* The following code was generated by JFlex 1.6.1 */

/* codigo de usuario */

package Analizadores;
import gui.Frames.VentanaAppCliente;
import java_cup.runtime.*;
import static Analizadores.sym.*;






/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>archivoFlex.flex</tt>
 */
public class miLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\25\1\26\1\0\2\25\16\11\4\0\1\27\1\24\1\4"+
    "\1\16\1\10\1\13\1\13\1\24\1\12\1\12\1\13\1\13\1\13"+
    "\1\6\1\15\1\3\1\103\1\104\1\100\1\105\6\17\1\14\1\13"+
    "\1\1\1\5\1\2\1\24\1\13\1\30\1\37\1\46\1\67\1\52"+
    "\1\70\1\66\1\71\1\35\1\76\1\11\1\63\1\54\1\50\1\43"+
    "\1\56\1\57\1\33\1\45\1\32\1\41\1\61\1\65\1\74\1\11"+
    "\1\75\1\72\1\0\1\73\1\0\1\7\1\0\1\31\1\40\1\47"+
    "\1\77\1\53\1\77\1\11\1\20\1\36\2\11\1\64\1\55\1\51"+
    "\1\44\1\22\1\60\1\34\1\23\1\21\1\42\1\62\4\11\4\0"+
    "\41\11\1\0\1\24\4\11\4\0\1\11\2\0\1\11\7\0\1\11"+
    "\4\0\1\11\4\0\1\24\27\11\1\0\37\11\1\0\u01ca\11\4\0"+
    "\14\11\16\0\5\11\7\0\1\11\1\0\1\11\21\0\165\11\1\0"+
    "\2\11\2\0\4\11\10\0\1\11\1\0\3\11\1\0\1\11\1\0"+
    "\24\11\1\0\123\11\1\0\213\11\1\0\5\11\2\0\236\11\11\0"+
    "\46\11\2\0\1\11\7\0\47\11\7\0\1\11\1\0\55\11\1\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\0\1\11\10\0\33\11\5\0"+
    "\3\11\15\0\5\11\6\0\1\11\4\0\13\11\5\0\100\11\12\102"+
    "\4\0\146\11\1\0\11\11\1\0\12\11\1\0\6\11\12\102\3\11"+
    "\2\0\1\11\17\0\74\11\2\0\145\11\16\0\12\102\54\11\4\0"+
    "\1\11\5\0\56\11\22\0\34\11\104\0\1\11\1\0\13\11\67\0"+
    "\33\11\1\0\144\11\2\0\12\102\1\0\7\11\1\0\7\11\1\0"+
    "\3\11\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\1\11\3\0\4\11\2\0\11\11\2\0\2\11\2\0\4\11\10\0"+
    "\1\11\4\0\2\11\1\0\5\11\2\0\12\102\4\11\7\0\1\11"+
    "\5\0\3\11\1\0\6\11\4\0\2\11\2\0\26\11\1\0\7\11"+
    "\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\11\1\0\5\11"+
    "\4\0\2\11\2\0\3\11\3\0\1\11\7\0\4\11\1\0\1\11"+
    "\7\0\12\102\6\11\13\0\3\11\1\0\11\11\1\0\3\11\1\0"+
    "\26\11\1\0\7\11\1\0\2\11\1\0\5\11\2\0\12\11\1\0"+
    "\3\11\1\0\3\11\2\0\1\11\17\0\4\11\2\0\12\102\1\0"+
    "\1\11\17\0\3\11\1\0\10\11\2\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\2\11\1\0\5\11\2\0\11\11\2\0\2\11\2\0"+
    "\3\11\10\0\2\11\4\0\2\11\1\0\5\11\2\0\12\102\1\0"+
    "\1\11\20\0\2\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0"+
    "\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11\3\0"+
    "\14\11\4\0\5\11\3\0\3\11\1\0\4\11\2\0\1\11\6\0"+
    "\1\11\16\0\12\102\11\0\1\11\7\0\3\11\1\0\10\11\1\0"+
    "\3\11\1\0\27\11\1\0\12\11\1\0\5\11\3\0\10\11\1\0"+
    "\3\11\1\0\4\11\7\0\2\11\1\0\2\11\6\0\4\11\2\0"+
    "\12\102\22\0\2\11\1\0\10\11\1\0\3\11\1\0\27\11\1\0"+
    "\12\11\1\0\5\11\2\0\11\11\1\0\3\11\1\0\4\11\7\0"+
    "\2\11\7\0\1\11\1\0\4\11\2\0\12\102\1\0\2\11\17\0"+
    "\2\11\1\0\10\11\1\0\3\11\1\0\51\11\2\0\10\11\1\0"+
    "\3\11\1\0\5\11\10\0\1\11\10\0\4\11\2\0\12\102\12\0"+
    "\6\11\2\0\2\11\1\0\22\11\3\0\30\11\1\0\11\11\1\0"+
    "\1\11\2\0\7\11\3\0\1\11\4\0\6\11\1\0\1\11\1\0"+
    "\10\11\6\0\12\101\2\0\2\11\15\0\72\11\4\0\20\11\1\0"+
    "\12\102\47\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0"+
    "\1\11\6\0\4\11\1\0\7\11\1\0\3\11\1\0\1\11\1\0"+
    "\1\11\2\0\2\11\1\0\15\11\1\0\3\11\2\0\5\11\1\0"+
    "\1\11\1\0\6\11\2\0\12\102\2\0\4\11\40\0\1\11\27\0"+
    "\2\11\6\0\12\102\13\0\1\11\1\0\1\11\1\0\1\11\4\0"+
    "\12\11\1\0\44\11\4\0\24\11\1\0\22\11\1\0\44\11\11\0"+
    "\1\11\71\0\100\11\12\102\6\0\100\11\12\102\4\11\2\0\46\11"+
    "\1\0\1\11\5\0\1\11\2\0\53\11\1\0\u014d\11\1\0\4\11"+
    "\2\0\7\11\1\0\1\11\1\0\4\11\2\0\51\11\1\0\4\11"+
    "\2\0\41\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11"+
    "\2\0\17\11\1\0\71\11\1\0\4\11\2\0\103\11\2\0\3\11"+
    "\40\0\20\11\20\0\125\11\14\0\u026c\11\2\0\21\11\1\0\32\11"+
    "\5\0\113\11\3\0\3\11\17\0\15\11\1\0\7\11\13\0\25\11"+
    "\13\0\24\11\14\0\15\11\1\0\3\11\1\0\2\11\14\0\124\11"+
    "\3\0\1\11\3\0\3\11\2\0\12\102\41\0\3\11\2\0\12\102"+
    "\6\0\130\11\10\0\53\11\5\0\106\11\12\0\35\11\3\0\14\11"+
    "\4\0\14\11\12\0\12\102\36\11\2\0\5\11\13\0\54\11\4\0"+
    "\32\11\6\0\12\102\46\0\34\11\4\0\77\11\1\0\35\11\2\0"+
    "\1\11\12\102\6\0\12\102\15\0\1\11\130\0\114\11\4\0\12\102"+
    "\21\0\11\11\14\0\60\11\12\102\72\11\14\0\70\11\10\0\12\102"+
    "\3\0\3\11\12\102\44\11\122\0\3\11\1\0\43\11\11\0\347\11"+
    "\25\0\u011a\11\2\0\6\11\2\0\46\11\2\0\6\11\2\0\10\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\37\11\2\0\65\11"+
    "\1\0\7\11\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11"+
    "\2\0\6\11\4\0\15\11\5\0\3\11\1\0\7\11\16\0\5\11"+
    "\32\0\5\11\20\0\2\11\23\0\1\11\13\0\5\11\5\0\6\11"+
    "\1\0\1\11\15\0\1\11\20\0\15\11\3\0\33\11\25\0\15\11"+
    "\4\0\1\11\3\0\14\11\21\0\1\11\4\0\1\11\2\0\12\11"+
    "\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\4\11\1\0\13\11\2\0\4\11\5\0\5\11\4\0\1\11"+
    "\21\0\51\11\u0a77\0\57\11\1\0\57\11\1\0\205\11\6\0\11\11"+
    "\14\0\46\11\1\0\1\11\5\0\1\11\2\0\70\11\7\0\1\11"+
    "\17\0\30\11\11\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\40\11"+
    "\57\0\1\11\u01d5\0\3\11\31\0\17\11\1\0\5\11\2\0\5\11"+
    "\4\0\126\11\2\0\2\11\2\0\3\11\1\0\132\11\1\0\4\11"+
    "\5\0\51\11\3\0\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11"+
    "\112\0\u51cd\11\63\0\u048d\11\103\0\56\11\2\0\u010d\11\3\0\20\11"+
    "\12\102\2\11\24\0\60\11\4\0\12\11\1\0\31\11\7\0\123\11"+
    "\45\0\11\11\2\0\147\11\2\0\4\11\1\0\4\11\14\0\13\11"+
    "\115\0\60\11\20\0\1\11\7\0\64\11\14\0\105\11\13\0\12\102"+
    "\6\0\30\11\3\0\1\11\4\0\12\102\44\11\2\0\44\11\14\0"+
    "\35\11\3\0\101\11\16\0\1\11\12\102\26\0\12\101\6\0\67\11"+
    "\11\0\16\11\2\0\12\102\6\0\27\11\3\0\2\11\4\0\103\11"+
    "\30\0\3\11\2\0\20\11\2\0\5\11\12\0\6\11\2\0\6\11"+
    "\2\0\6\11\11\0\7\11\1\0\7\11\221\0\53\11\1\0\2\11"+
    "\2\0\12\102\6\0\u2ba4\11\14\0\27\11\4\0\61\11\u2104\0\u016e\11"+
    "\2\0\152\11\46\0\7\11\14\0\5\11\5\0\14\11\1\0\15\11"+
    "\1\0\5\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0\154\11"+
    "\41\0\u016b\11\22\0\100\11\2\0\66\11\50\0\15\11\3\0\20\11"+
    "\20\0\7\11\14\0\2\11\30\0\3\11\31\0\1\11\6\0\5\11"+
    "\1\0\207\11\2\0\1\11\4\0\1\11\13\0\12\102\7\0\32\11"+
    "\4\0\1\11\1\0\32\11\13\0\131\11\3\0\6\11\2\0\6\11"+
    "\2\0\6\11\2\0\3\11\3\0\2\11\3\0\2\11\22\0\3\11"+
    "\4\0\14\11\1\0\32\11\1\0\23\11\1\0\2\11\1\0\17\11"+
    "\2\0\16\11\42\0\173\11\105\0\65\11\210\0\1\11\202\0\35\11"+
    "\3\0\61\11\57\0\37\11\21\0\33\11\65\0\36\11\2\0\44\11"+
    "\4\0\10\11\1\0\5\11\52\0\236\11\2\0\12\102\u0356\0\6\11"+
    "\2\0\1\11\1\0\54\11\1\0\2\11\3\0\1\11\2\0\27\11"+
    "\252\0\26\11\12\0\32\11\106\0\70\11\6\0\2\11\100\0\4\11"+
    "\1\0\2\11\5\0\10\11\1\0\3\11\1\0\33\11\4\0\3\11"+
    "\4\0\1\11\40\0\35\11\203\0\66\11\12\0\26\11\12\0\23\11"+
    "\215\0\111\11\u03b7\0\107\11\37\0\12\102\20\0\73\11\2\0\1\11"+
    "\22\0\31\11\7\0\12\102\6\0\65\11\1\0\12\102\100\0\105\11"+
    "\13\0\12\102\u0116\0\12\101\u01d6\0\12\101\u0176\0\12\101\46\0\70\11"+
    "\10\0\12\102\u0216\0\12\101\u0716\0\u036f\11\221\0\143\11\u0b9d\0\u042f\11"+
    "\u33d1\0\u0239\11\47\0\12\101\346\0\12\101\u03a6\0\105\11\13\0\57\11"+
    "\20\0\21\11\u4060\0\2\11\u2163\0\5\11\3\0\26\11\2\0\7\11"+
    "\36\0\4\11\224\0\3\11\u01bb\0\125\11\1\0\107\11\1\0\2\11"+
    "\2\0\1\11\2\0\2\11\2\0\4\11\1\0\14\11\1\0\1\11"+
    "\1\0\7\11\1\0\101\11\1\0\4\11\2\0\10\11\1\0\7\11"+
    "\1\0\34\11\1\0\4\11\1\0\5\11\1\0\1\11\3\0\7\11"+
    "\1\0\u0154\11\2\0\31\11\1\0\31\11\1\0\37\11\1\0\31\11"+
    "\1\0\37\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0\37\11"+
    "\1\0\31\11\1\0\10\11\2\0\62\102\u1600\0\4\11\1\0\33\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\1\0\12\11\1\0\4\11"+
    "\1\0\1\11\1\0\1\11\6\0\1\11\4\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11"+
    "\1\0\1\11\2\0\4\11\1\0\7\11\1\0\4\11\1\0\4\11"+
    "\1\0\1\11\1\0\12\11\1\0\21\11\5\0\3\11\1\0\5\11"+
    "\1\0\21\11\u1144\0\ua6d7\11\51\0\u1035\11\13\0\336\11\u3fe2\0\u021e\11"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\11\36\0\140\11\200\0\360\11\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\2\11\21\7\1\1\1\7\1\0\10\7\1\12"+
    "\20\7\20\0\1\7\1\0\32\7\1\0\1\13\3\0"+
    "\1\14\15\0\1\7\1\15\32\7\1\16\17\0\4\7"+
    "\1\17\4\7\1\20\4\7\1\21\1\22\1\7\1\23"+
    "\6\7\1\24\1\25\2\7\17\0\3\7\1\26\1\27"+
    "\2\7\1\30\3\7\1\31\3\7\1\32\2\7\1\33"+
    "\2\7\11\0\1\34\6\0\11\7\1\35\4\7\1\36"+
    "\2\7\1\37\7\0\1\40\6\0\2\7\1\41\1\42"+
    "\11\7\1\43\3\7\2\0\1\44\1\45\7\0\1\7"+
    "\1\46\1\47\2\7\1\50\7\7\1\51\3\7\1\52"+
    "\2\0\1\53\1\54\1\55\3\0\1\7\1\56\1\57"+
    "\13\7\11\0\1\60\14\7\1\0\1\61\3\0\6\7"+
    "\1\62\5\7\1\0\1\63\1\64\3\7\1\65\17\7"+
    "\1\66\6\7\1\67\4\7\1\70\1\7\1\71\2\7"+
    "\1\72\2\7\1\73\3\7\1\74\2\7\1\75\2\7"+
    "\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\106\0\106\0\106\0\214\0\106\0\322"+
    "\0\u0118\0\106\0\106\0\u015e\0\u01a4\0\u01ea\0\u0230\0\u0276"+
    "\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6"+
    "\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6"+
    "\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906"+
    "\0\322\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0"+
    "\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20"+
    "\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180"+
    "\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0"+
    "\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0"+
    "\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810"+
    "\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\106\0\u19fa"+
    "\0\u1a40\0\u1a86\0\106\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14"+
    "\0\u1e5a\0\106\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe"+
    "\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e"+
    "\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e"+
    "\0\u24a4\0\u24ea\0\u2530\0\u2576\0\106\0\u25bc\0\u2602\0\u2648"+
    "\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878"+
    "\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8"+
    "\0\322\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\322\0\u2c06\0\u2c4c"+
    "\0\u2c92\0\u2cd8\0\322\0\322\0\u2d1e\0\322\0\u2d64\0\u2daa"+
    "\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\322\0\322\0\u2f08\0\u2f4e"+
    "\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e"+
    "\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368\0\u33ae"+
    "\0\u33f4\0\u343a\0\u3480\0\322\0\u34c6\0\u350c\0\322\0\u3552"+
    "\0\u3598\0\u35de\0\322\0\u3624\0\u366a\0\u36b0\0\322\0\u36f6"+
    "\0\u373c\0\322\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0"+
    "\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\106\0\u3a84\0\u3aca"+
    "\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa"+
    "\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\322\0\u3e9e\0\u3ee4"+
    "\0\u3f2a\0\u3f70\0\322\0\u3fb6\0\u3ffc\0\106\0\u4042\0\u4088"+
    "\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6\0\106\0\u422c\0\u4272"+
    "\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c\0\322"+
    "\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba\0\u4600\0\u4646\0\u468c"+
    "\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876\0\106"+
    "\0\106\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4\0\u4a1a\0\u4a60"+
    "\0\u4aa6\0\u4aec\0\322\0\u4b32\0\u4b78\0\322\0\u4bbe\0\u4c04"+
    "\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\322\0\u4da8\0\u4dee"+
    "\0\u4e34\0\106\0\u4e7a\0\u4ec0\0\106\0\106\0\106\0\u4f06"+
    "\0\u4f4c\0\u4f92\0\u4fd8\0\322\0\322\0\u501e\0\u5064\0\u50aa"+
    "\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e\0\u5294\0\u52da"+
    "\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u550a"+
    "\0\u5550\0\322\0\u5596\0\u55dc\0\u5622\0\u5668\0\u56ae\0\u56f4"+
    "\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852\0\u5898\0\u58de\0\106"+
    "\0\u5924\0\u596a\0\u59b0\0\u59f6\0\u5a3c\0\u5a82\0\u5ac8\0\u5b0e"+
    "\0\u5b54\0\322\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8"+
    "\0\106\0\106\0\u5d3e\0\u5d84\0\u5dca\0\322\0\u5e10\0\u5e56"+
    "\0\u5e9c\0\u5ee2\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\u6086"+
    "\0\u60cc\0\u6112\0\u6158\0\u619e\0\u61e4\0\322\0\u622a\0\u6270"+
    "\0\u62b6\0\u62fc\0\u6342\0\u6388\0\322\0\u63ce\0\u6414\0\u645a"+
    "\0\u64a0\0\322\0\u64e6\0\322\0\u652c\0\u6572\0\322\0\u65b8"+
    "\0\u65fe\0\322\0\u6644\0\u668a\0\u66d0\0\322\0\u6716\0\u675c"+
    "\0\322\0\u67a2\0\u67e8\0\322\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\14\10\1\11"+
    "\1\10\1\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\10\1\20\1\10\1\21\1\10\1\22\1\10\1\23"+
    "\1\10\1\24\1\25\1\10\1\26\1\27\2\30\1\31"+
    "\1\10\1\32\2\10\2\33\4\10\1\34\1\35\1\10"+
    "\1\36\1\2\2\10\1\37\2\10\1\2\4\10\114\0"+
    "\3\40\103\0\16\10\4\0\42\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\2\41\40\10\2\0\5\10"+
    "\1\0\4\10\27\0\1\14\64\0\13\10\1\42\2\10"+
    "\4\0\2\10\1\42\13\10\2\43\1\44\12\10\1\45"+
    "\2\10\1\46\3\10\2\0\5\10\1\0\4\10\6\0"+
    "\13\10\1\42\2\10\4\0\2\10\1\42\13\10\2\43"+
    "\22\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\5\10\1\47\14\10\1\50\17\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\37\10\1\51\2\10\2\0"+
    "\1\10\1\52\3\10\1\0\4\10\6\0\16\10\4\0"+
    "\13\10\1\53\26\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\15\10\1\54\24\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\3\10\1\55\36\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\5\10\1\56"+
    "\34\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\13\10\1\57\6\10\1\60\10\10\1\61\6\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\11\10\1\62"+
    "\1\10\2\63\25\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\13\10\2\63\25\10\2\0\5\10\1\0"+
    "\4\10\6\0\13\10\1\64\2\10\4\0\2\10\1\64"+
    "\37\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\13\10\1\65\26\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\1\66\1\41\40\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\2\67\40\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\22\10\1\70\17\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\22\10"+
    "\1\71\17\10\2\0\5\10\1\0\4\10\6\0\1\72"+
    "\2\73\1\74\1\0\3\75\1\76\1\77\1\100\3\74"+
    "\3\0\1\75\2\74\1\101\2\74\1\102\10\74\1\103"+
    "\5\74\1\104\1\74\1\105\2\74\1\106\5\74\1\107"+
    "\2\74\2\0\2\74\1\110\1\74\1\111\1\0\1\74"+
    "\1\77\1\111\1\77\6\0\16\10\4\0\11\10\1\112"+
    "\30\10\2\0\5\10\1\0\4\10\6\0\4\113\5\0"+
    "\5\113\4\0\42\113\2\0\5\113\1\0\4\113\6\0"+
    "\16\10\4\0\3\10\2\114\35\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\3\10\2\115\35\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\16\10\2\116"+
    "\22\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\16\10\1\117\23\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\2\10\1\120\2\10\1\121\34\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\3\10\1\122"+
    "\36\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\2\10\1\123\37\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\42\10\2\0\1\124\4\10\1\0\4\10"+
    "\6\0\16\10\4\0\27\10\1\125\12\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\3\10\1\126\36\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\11\10"+
    "\1\127\30\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\5\10\1\130\34\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\2\10\1\131\37\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\33\10\1\132\6\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\20\10"+
    "\1\133\21\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\1\134\41\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\22\10\1\135\17\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\24\10\2\136\14\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\5\10\2\137"+
    "\33\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\37\10\1\140\2\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\3\10\2\114\31\10\1\141\1\142\2\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\33\10"+
    "\2\143\5\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\3\10\1\144\36\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\16\10\1\145\23\10\2\0\5\10"+
    "\1\0\4\10\6\0\4\146\1\0\4\75\5\146\3\0"+
    "\1\75\42\146\1\0\1\147\5\146\1\0\4\146\6\0"+
    "\1\146\3\150\1\0\2\75\1\151\1\75\5\150\3\0"+
    "\1\75\42\150\1\0\1\147\5\150\1\0\4\150\6\0"+
    "\1\75\3\74\1\0\2\75\1\151\1\75\5\74\3\0"+
    "\1\75\42\74\1\0\1\147\5\74\1\0\4\74\6\0"+
    "\4\75\1\0\11\75\3\0\43\75\1\0\1\147\5\75"+
    "\1\0\4\75\6\0\4\75\1\0\4\75\1\152\4\75"+
    "\3\0\1\75\2\152\5\75\2\152\5\75\2\152\2\75"+
    "\2\152\13\75\2\152\1\75\1\0\1\147\3\75\2\152"+
    "\1\0\1\75\3\152\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\1\77\4\74\3\0\1\75\42\74\1\0"+
    "\1\153\4\74\1\77\1\0\1\74\3\77\6\0\1\75"+
    "\3\74\1\0\2\75\1\151\1\75\2\74\1\154\2\74"+
    "\3\0\1\75\42\74\1\0\1\147\5\74\1\0\4\74"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\5\74"+
    "\3\0\1\75\5\74\1\155\34\74\1\0\1\147\5\74"+
    "\1\0\4\74\6\0\1\75\3\74\1\0\2\75\1\151"+
    "\1\75\5\74\3\0\1\75\24\74\1\156\15\74\1\0"+
    "\1\147\1\74\1\157\3\74\1\0\4\74\6\0\1\75"+
    "\3\74\1\0\2\75\1\151\1\75\5\74\3\0\1\75"+
    "\22\74\1\160\17\74\1\0\1\147\5\74\1\0\4\74"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\5\74"+
    "\3\0\1\75\22\74\1\161\17\74\1\0\1\147\5\74"+
    "\1\0\4\74\6\0\1\75\3\74\1\0\2\75\1\151"+
    "\1\75\5\74\3\0\1\75\1\162\41\74\1\0\1\147"+
    "\5\74\1\0\4\74\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\5\74\3\0\1\75\5\74\1\163\34\74"+
    "\1\0\1\147\5\74\1\0\4\74\6\0\1\75\3\74"+
    "\1\0\2\75\1\151\1\75\5\74\3\0\1\75\22\74"+
    "\1\164\17\74\1\0\1\147\5\74\1\0\4\74\6\0"+
    "\1\75\3\74\1\0\2\75\1\151\1\75\5\74\3\0"+
    "\1\75\11\74\1\165\30\74\1\0\1\147\5\74\1\0"+
    "\4\74\6\0\1\75\3\74\1\0\2\75\1\151\1\75"+
    "\1\166\4\74\3\0\1\75\42\74\1\0\1\153\4\74"+
    "\1\166\1\167\1\170\3\166\6\0\16\10\4\0\15\10"+
    "\1\171\24\10\2\0\5\10\1\0\4\10\4\0\1\172"+
    "\1\0\4\113\5\0\5\113\4\0\42\113\2\0\5\113"+
    "\1\0\4\113\6\0\16\10\4\0\2\173\40\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\5\10\2\174"+
    "\33\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\5\10\2\175\33\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\41\10\1\176\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\11\10\1\177\30\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\20\10\1\200\21\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\22\10"+
    "\1\201\17\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\11\10\1\202\30\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\2\10\1\203\37\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\11\10\1\204\30\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\3\10"+
    "\1\205\36\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\1\206\41\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\36\10\1\207\3\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\5\10\1\210\34\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\13\10\1\211"+
    "\26\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\2\10\1\212\37\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\15\10\1\213\24\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\31\10\1\214\10\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\7\10\2\215"+
    "\31\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\27\10\2\216\11\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\5\10\1\217\34\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\5\10\1\220\34\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\3\10\1\221"+
    "\36\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\13\10\2\222\25\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\22\10\1\223\17\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\41\10\1\224\2\0\5\10"+
    "\1\0\4\10\6\0\4\146\1\0\4\75\5\146\3\0"+
    "\1\75\42\146\1\0\1\225\5\146\1\0\4\146\6\0"+
    "\1\146\3\150\1\0\2\75\1\151\1\75\5\150\3\0"+
    "\1\75\42\150\1\0\1\225\5\150\1\0\4\150\6\0"+
    "\1\75\3\226\1\0\4\75\5\226\3\0\1\75\42\226"+
    "\1\0\1\147\5\226\1\0\4\226\6\0\4\75\1\0"+
    "\4\75\1\227\4\75\3\0\1\75\2\227\5\75\2\227"+
    "\5\75\2\227\2\75\2\227\13\75\2\227\1\75\1\0"+
    "\1\147\3\75\2\227\1\0\1\75\3\227\6\0\1\75"+
    "\3\74\1\0\2\75\1\151\1\75\2\74\1\230\2\74"+
    "\3\0\1\75\42\74\1\0\1\147\5\74\1\0\4\74"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\5\74"+
    "\3\0\1\75\2\74\1\231\37\74\1\0\1\147\5\74"+
    "\1\0\4\74\6\0\1\75\3\74\1\0\2\75\1\151"+
    "\1\75\5\74\3\0\1\75\1\232\41\74\1\0\1\147"+
    "\5\74\1\0\4\74\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\5\74\3\0\1\75\27\74\1\233\12\74"+
    "\1\0\1\147\5\74\1\0\4\74\6\0\1\75\3\74"+
    "\1\0\2\75\1\151\1\75\5\74\3\0\1\75\20\74"+
    "\1\234\21\74\1\0\1\147\5\74\1\0\4\74\6\0"+
    "\1\75\3\74\1\0\2\75\1\151\1\75\5\74\3\0"+
    "\1\75\20\74\1\235\21\74\1\0\1\147\5\74\1\0"+
    "\4\74\6\0\1\75\3\74\1\0\2\75\1\151\1\75"+
    "\5\74\3\0\1\75\3\74\1\236\36\74\1\0\1\147"+
    "\5\74\1\0\4\74\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\5\74\3\0\1\75\37\74\1\237\2\74"+
    "\1\0\1\147\5\74\1\0\4\74\6\0\1\75\3\74"+
    "\1\0\2\75\1\151\1\75\5\74\3\0\1\75\3\74"+
    "\1\240\36\74\1\0\1\147\5\74\1\0\4\74\6\0"+
    "\1\75\3\74\1\0\2\75\1\151\1\75\5\74\3\0"+
    "\1\75\15\74\1\241\24\74\1\0\1\147\5\74\1\0"+
    "\4\74\6\0\1\75\3\74\1\0\2\75\1\151\1\75"+
    "\1\242\4\74\3\0\1\75\42\74\1\0\1\153\4\74"+
    "\1\242\1\243\1\244\3\242\17\0\1\243\60\0\6\243"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\1\244"+
    "\4\74\3\0\1\75\42\74\1\0\1\147\4\74\1\244"+
    "\1\243\4\244\6\0\16\10\4\0\2\10\1\245\37\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\24\10"+
    "\2\246\14\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\7\10\2\247\31\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\13\10\2\250\25\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\13\10\1\251\26\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\3\10"+
    "\1\252\36\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\22\10\1\253\17\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\36\10\1\254\3\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\33\10\1\255\6\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\13\10"+
    "\1\256\26\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\5\10\1\257\34\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\1\260\41\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\3\10\1\261\36\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\22\10\1\262"+
    "\17\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\13\10\1\263\26\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\3\10\1\264\36\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\3\10\1\265\36\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\22\10\1\266"+
    "\17\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\1\267\12\10\1\270\26\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\3\10\2\271\35\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\11\10\2\272\27\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\40\10"+
    "\1\273\1\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\20\10\1\274\21\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\22\10\1\275\17\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\3\10\2\276\35\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\16\10"+
    "\1\277\23\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\1\300\41\10\2\0\5\10\1\0\4\10\6\0"+
    "\1\75\3\226\1\0\2\75\1\301\1\75\5\226\3\0"+
    "\1\75\42\226\1\0\1\147\5\226\1\0\4\226\6\0"+
    "\4\75\1\0\4\75\1\302\4\75\3\0\1\75\2\302"+
    "\5\75\2\302\5\75\2\302\2\75\2\302\13\75\2\302"+
    "\1\75\1\0\1\147\3\75\2\302\1\0\1\75\3\302"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\3\74"+
    "\1\303\1\74\3\0\1\75\42\74\1\0\1\147\5\74"+
    "\1\0\4\74\6\0\1\75\3\74\1\0\2\75\1\151"+
    "\1\75\5\74\3\0\1\75\11\74\1\304\30\74\1\0"+
    "\1\147\5\74\1\0\4\74\6\0\1\75\3\74\1\0"+
    "\2\75\1\151\1\75\5\74\3\0\1\75\36\74\1\305"+
    "\3\74\1\0\1\147\5\74\1\0\4\74\6\0\1\75"+
    "\3\74\1\0\2\75\1\151\1\75\5\74\3\0\1\75"+
    "\11\74\1\306\30\74\1\0\1\147\5\74\1\0\4\74"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\5\74"+
    "\3\0\1\75\2\74\1\307\37\74\1\0\1\147\5\74"+
    "\1\0\4\74\6\0\1\75\3\74\1\0\2\75\1\151"+
    "\1\75\5\74\3\0\1\75\11\74\1\310\30\74\1\0"+
    "\1\147\5\74\1\0\4\74\6\0\1\75\3\74\1\0"+
    "\2\75\1\151\1\75\5\74\3\0\1\75\3\74\1\311"+
    "\36\74\1\0\1\147\5\74\1\0\4\74\6\0\1\75"+
    "\3\74\1\0\2\75\1\151\1\75\5\74\3\0\1\75"+
    "\22\74\1\312\17\74\1\0\1\147\5\74\1\0\4\74"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\5\74"+
    "\3\0\1\75\22\74\1\313\17\74\1\0\1\147\5\74"+
    "\1\0\4\74\6\0\1\75\3\74\1\0\2\75\1\151"+
    "\1\75\5\74\3\0\1\75\2\74\1\314\37\74\1\0"+
    "\1\147\5\74\1\0\4\74\6\0\1\75\3\74\1\0"+
    "\2\75\1\151\1\75\1\315\4\74\3\0\1\75\42\74"+
    "\1\0\1\153\4\74\1\315\1\316\1\317\3\315\17\0"+
    "\1\316\60\0\6\316\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\1\317\4\74\3\0\1\75\42\74\1\0"+
    "\1\147\4\74\1\317\1\316\4\317\6\0\16\10\4\0"+
    "\5\10\1\320\34\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\22\10\2\321\16\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\11\10\2\322\27\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\20\10\2\323"+
    "\20\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\1\324\41\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\1\325\41\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\1\326\41\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\13\10\1\327\26\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\22\10\1\330\17\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\3\10"+
    "\1\331\36\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\5\10\1\332\34\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\20\10\1\333\21\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\1\334\41\10\2\0"+
    "\5\10\1\0\4\10\6\0\1\10\1\335\14\10\4\0"+
    "\42\10\2\0\5\10\1\0\4\10\6\0\1\10\1\336"+
    "\14\10\4\0\42\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\22\10\2\337\16\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\22\10\2\340\16\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\5\10\1\341"+
    "\34\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\1\342\41\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\41\10\1\343\2\0\5\10\1\0\4\10\6\0"+
    "\1\10\1\344\14\10\4\0\42\10\2\0\5\10\1\0"+
    "\4\10\3\0\1\345\2\0\4\346\1\0\11\346\1\345"+
    "\2\0\1\75\42\346\1\0\1\147\5\346\1\0\4\346"+
    "\6\0\4\75\1\0\4\75\1\347\4\75\3\0\1\75"+
    "\2\347\5\75\2\347\5\75\2\347\2\75\2\347\13\75"+
    "\2\347\1\75\1\0\1\147\3\75\2\347\1\0\1\75"+
    "\3\347\6\0\1\75\3\74\1\0\1\75\1\350\1\151"+
    "\1\75\4\74\1\351\3\0\1\75\42\74\1\0\1\147"+
    "\5\74\1\0\4\74\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\5\74\3\0\1\75\33\74\1\352\6\74"+
    "\1\0\1\147\5\74\1\0\4\74\6\0\1\75\3\74"+
    "\1\0\2\75\1\151\1\75\5\74\3\0\1\75\22\74"+
    "\1\353\17\74\1\0\1\147\5\74\1\0\4\74\6\0"+
    "\1\75\3\74\1\0\2\75\1\151\1\75\5\74\3\0"+
    "\1\75\5\74\1\354\34\74\1\0\1\147\5\74\1\0"+
    "\4\74\6\0\1\75\3\74\1\0\2\75\1\151\1\75"+
    "\5\74\3\0\1\75\3\74\1\355\36\74\1\0\1\147"+
    "\5\74\1\0\4\74\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\5\74\3\0\1\75\42\74\1\0\1\356"+
    "\5\74\1\0\4\74\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\5\74\3\0\1\75\1\357\41\74\1\0"+
    "\1\147\5\74\1\0\4\74\6\0\1\75\3\74\1\0"+
    "\2\75\1\151\1\75\5\74\3\0\1\75\13\74\1\360"+
    "\26\74\1\0\1\147\5\74\1\0\4\74\6\0\1\75"+
    "\3\74\1\0\2\75\1\151\1\75\5\74\3\0\1\75"+
    "\16\74\1\361\23\74\1\0\1\147\5\74\1\0\4\74"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\5\74"+
    "\3\0\1\75\5\74\1\362\34\74\1\0\1\147\5\74"+
    "\1\0\4\74\6\0\1\363\3\74\1\0\2\75\1\151"+
    "\1\75\1\77\4\74\3\0\1\75\42\74\1\0\1\153"+
    "\4\74\1\77\1\0\1\74\3\77\6\0\1\364\105\0"+
    "\1\363\3\74\1\0\2\75\1\151\1\75\5\74\3\0"+
    "\1\75\42\74\1\0\1\147\5\74\1\0\4\74\6\0"+
    "\16\10\4\0\40\10\1\365\1\10\2\0\5\10\1\0"+
    "\4\10\6\0\13\10\1\366\2\10\4\0\2\10\1\366"+
    "\37\10\2\0\5\10\1\0\4\10\6\0\13\10\1\367"+
    "\2\10\4\0\2\10\1\367\37\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\22\10\2\370\16\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\16\10\1\371"+
    "\23\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\3\10\1\372\36\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\3\10\1\373\36\10\2\0\5\10\1\0"+
    "\4\10\6\0\1\10\1\374\14\10\4\0\42\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\13\10\1\375"+
    "\26\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\3\10\1\376\36\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\26\10\1\377\13\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\15\10\1\u0100\24\10\2\0"+
    "\5\10\1\0\4\10\6\0\13\10\1\u0101\2\10\4\0"+
    "\2\10\1\u0101\37\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\16\10\1\u0102\23\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\1\u0103\41\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\16\10\1\u0104\5\10"+
    "\1\u0105\15\10\2\0\5\10\1\0\4\10\3\0\1\345"+
    "\2\0\4\345\1\0\12\345\3\0\42\345\1\0\1\u0106"+
    "\5\345\1\0\4\345\3\0\1\345\2\0\4\346\1\0"+
    "\11\346\1\345\2\0\1\75\42\346\1\0\1\u0106\5\346"+
    "\1\0\4\346\6\0\4\75\1\0\4\75\1\u0107\4\75"+
    "\3\0\1\75\2\u0107\5\75\2\u0107\5\75\2\u0107\2\75"+
    "\2\u0107\13\75\2\u0107\1\75\1\0\1\147\3\75\2\u0107"+
    "\1\0\1\75\3\u0107\3\0\1\u0108\2\0\4\75\1\0"+
    "\11\75\3\0\43\75\1\0\1\147\5\75\1\0\4\75"+
    "\6\0\1\75\3\74\1\0\1\75\1\350\1\151\1\75"+
    "\5\74\3\0\1\75\42\74\1\0\1\147\5\74\1\0"+
    "\4\74\6\0\1\75\3\74\1\0\2\75\1\151\1\75"+
    "\5\74\3\0\1\75\13\74\1\u0109\26\74\1\0\1\147"+
    "\5\74\1\0\4\74\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\5\74\3\0\1\75\20\74\1\u010a\21\74"+
    "\1\0\1\147\5\74\1\0\4\74\6\0\1\75\3\74"+
    "\1\0\2\75\1\151\1\75\5\74\3\0\1\75\22\74"+
    "\1\u010b\17\74\1\0\1\147\5\74\1\0\4\74\6\0"+
    "\1\75\3\74\1\0\2\75\1\151\1\75\5\74\3\0"+
    "\1\75\1\u010c\41\74\1\0\1\147\5\74\1\0\4\74"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\5\74"+
    "\3\0\1\75\40\74\1\u010d\1\74\1\0\1\147\5\74"+
    "\1\0\4\74\6\0\1\75\3\74\1\0\2\75\1\151"+
    "\1\75\5\74\3\0\1\75\42\74\1\0\1\u010e\5\74"+
    "\1\0\4\74\6\0\1\75\3\74\1\0\2\75\1\151"+
    "\1\75\5\74\3\0\1\75\41\74\1\u010f\1\0\1\147"+
    "\5\74\1\0\4\74\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\5\74\3\0\1\75\40\74\1\u0110\1\74"+
    "\1\0\1\147\5\74\1\0\4\74\6\0\4\75\1\0"+
    "\11\75\3\0\43\75\1\0\1\147\5\75\1\0\1\75"+
    "\1\u0111\1\u0112\1\75\103\0\1\u0113\1\u0114\7\0\16\10"+
    "\4\0\5\10\1\u0115\34\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\3\10\2\u0116\35\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\13\10\2\u0117\25\10"+
    "\2\0\5\10\1\0\4\10\6\0\15\10\1\u0118\4\0"+
    "\15\10\1\u0118\24\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\5\10\1\u0119\34\10\2\0\5\10\1\0"+
    "\4\10\6\0\1\10\1\u011a\14\10\4\0\42\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\37\10\1\u011b"+
    "\2\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\15\10\1\u011c\1\u011d\7\10\1\u011e\13\10\2\0\5\10"+
    "\1\0\4\10\6\0\1\10\1\u011f\14\10\4\0\42\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\1\u0120"+
    "\41\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\5\10\1\u0121\34\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\2\u0122\40\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\1\u0123\41\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\3\10\1\u0124\36\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\13\10\1\u0125"+
    "\26\10\2\0\5\10\1\0\4\10\6\0\4\75\1\0"+
    "\4\75\1\u0126\4\75\3\0\1\75\2\u0126\5\75\2\u0126"+
    "\5\75\2\u0126\2\75\2\u0126\13\75\2\u0126\1\75\1\0"+
    "\1\147\3\75\2\u0126\1\0\1\75\3\u0126\3\0\1\u0127"+
    "\110\0\1\75\3\74\1\0\2\75\1\151\1\75\5\74"+
    "\3\0\1\75\42\74\1\0\1\u0128\5\74\1\0\4\74"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\5\74"+
    "\3\0\1\75\42\74\1\0\1\u0129\5\74\1\0\4\74"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\5\74"+
    "\3\0\1\75\3\74\1\u012a\36\74\1\0\1\147\5\74"+
    "\1\0\4\74\6\0\1\75\3\74\1\0\2\75\1\151"+
    "\1\75\5\74\3\0\1\75\3\74\1\u012b\36\74\1\0"+
    "\1\147\5\74\1\0\4\74\6\0\1\75\3\74\1\0"+
    "\2\75\1\151\1\75\5\74\3\0\1\75\13\74\1\u012c"+
    "\26\74\1\0\1\147\5\74\1\0\4\74\6\0\1\75"+
    "\3\74\1\0\2\75\1\151\1\75\5\74\3\0\1\75"+
    "\1\u012d\41\74\1\0\1\147\5\74\1\0\4\74\6\0"+
    "\1\75\3\74\1\0\2\75\1\151\1\75\5\74\3\0"+
    "\1\75\5\74\1\u012e\34\74\1\0\1\147\5\74\1\0"+
    "\4\74\6\0\4\75\1\0\4\75\1\u012f\4\75\3\0"+
    "\43\75\1\0\1\147\4\75\1\u012f\1\0\2\75\2\u012f"+
    "\6\0\4\75\1\0\11\75\3\0\43\75\1\0\1\147"+
    "\4\75\1\u012f\1\0\1\75\2\u012f\1\75\17\0\1\u0130"+
    "\60\0\1\u0130\3\0\2\u0130\100\0\1\u0130\2\0\2\u0130"+
    "\7\0\16\10\4\0\16\10\1\u0131\23\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\13\10\2\u0132\25\10"+
    "\2\0\5\10\1\0\4\10\6\0\15\10\1\u0133\4\0"+
    "\15\10\1\u0133\24\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\13\10\1\u0134\26\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\16\10\1\u0135\23\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\1\u0136\41\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\5\10"+
    "\1\u0137\34\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\13\10\1\u0138\26\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\1\u0139\41\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\16\10\1\u013a\5\10\1\u013b"+
    "\15\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\36\10\1\u013c\3\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\2\10\1\u013d\37\10\2\0\5\10\1\0"+
    "\4\10\6\0\15\10\1\u013e\4\0\15\10\1\u013e\24\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\3\10"+
    "\1\u013f\36\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\22\10\1\u0140\17\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\37\10\1\u0141\2\10\2\0\5\10"+
    "\1\0\4\10\6\0\4\75\1\0\11\75\3\0\43\75"+
    "\1\0\1\u0142\5\75\1\0\4\75\7\0\3\u0143\5\0"+
    "\5\u0143\4\0\42\u0143\2\0\5\u0143\1\0\4\u0143\6\0"+
    "\1\75\3\74\1\0\2\75\1\151\1\75\5\74\3\0"+
    "\1\75\37\74\1\u0144\2\74\1\0\1\147\5\74\1\0"+
    "\4\74\6\0\1\75\3\74\1\0\2\75\1\151\1\75"+
    "\5\74\3\0\1\75\42\74\1\0\1\u0145\5\74\1\0"+
    "\4\74\6\0\1\75\3\74\1\0\2\75\1\151\1\75"+
    "\5\74\3\0\1\75\42\74\1\0\1\u0146\5\74\1\0"+
    "\4\74\6\0\1\75\3\74\1\0\2\75\1\151\1\75"+
    "\5\74\3\0\1\75\42\74\1\0\1\u0147\5\74\1\0"+
    "\4\74\6\0\1\75\3\74\1\0\2\75\1\151\1\75"+
    "\5\74\3\0\1\75\16\74\1\u0148\23\74\1\0\1\147"+
    "\5\74\1\0\4\74\6\0\1\u0149\3\75\1\0\11\75"+
    "\3\0\43\75\1\0\1\147\5\75\1\0\4\75\6\0"+
    "\1\u014a\105\0\16\10\4\0\1\u014b\41\10\2\0\5\10"+
    "\1\0\4\10\6\0\15\10\1\u014c\4\0\15\10\1\u014c"+
    "\24\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\20\10\1\u014d\21\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\13\10\1\u014e\26\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\2\10\1\u014f\37\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\24\10\1\u0150"+
    "\15\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\36\10\1\u0151\3\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\3\10\1\u0152\36\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\13\10\1\u0153\26\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\5\10\1\u0154"+
    "\34\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\5\10\1\u0155\34\10\2\0\5\10\1\0\4\10\6\0"+
    "\1\10\1\u0156\14\10\4\0\42\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\1\u0157\41\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\5\10\1\u0158\34\10"+
    "\2\0\5\10\1\0\4\10\7\0\3\u0143\3\0\1\u0159"+
    "\1\0\5\u0143\4\0\42\u0143\2\0\5\u0143\1\0\4\u0143"+
    "\6\0\1\75\3\74\1\0\2\75\1\151\1\75\5\74"+
    "\3\0\1\75\1\u015a\41\74\1\0\1\147\5\74\1\0"+
    "\4\74\6\0\1\75\3\74\1\0\2\75\1\151\1\75"+
    "\5\74\3\0\1\75\1\u015b\41\74\1\0\1\147\5\74"+
    "\1\0\4\74\6\0\4\75\1\0\11\75\3\0\43\75"+
    "\1\0\1\147\4\75\1\u015c\1\0\1\75\1\u015d\1\u015c"+
    "\1\u015e\100\0\1\u015f\2\0\1\u0160\1\u015f\1\u0161\6\0"+
    "\16\10\4\0\3\10\1\u0162\36\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\24\10\1\u0163\15\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\5\10\1\u0164"+
    "\34\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\26\10\1\u0165\13\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\5\10\1\u0166\34\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\22\10\1\u0167\17\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\37\10\1\u0168"+
    "\2\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\20\10\1\u0169\21\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\13\10\1\u016a\26\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\16\10\1\u016b\7\10\1\u016c"+
    "\13\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\16\10\1\u016d\23\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\40\10\1\u016e\1\10\2\0\5\10\1\0"+
    "\4\10\7\0\3\u016f\5\0\5\u016f\4\0\42\u016f\2\0"+
    "\5\u016f\1\0\4\u016f\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\5\74\3\0\1\75\42\74\1\0\1\u0170"+
    "\5\74\1\0\4\74\6\0\1\75\3\74\1\0\2\75"+
    "\1\151\1\75\5\74\3\0\1\75\3\74\1\u0171\36\74"+
    "\1\0\1\147\5\74\1\0\4\74\6\0\4\75\1\0"+
    "\4\75\1\u0172\4\75\3\0\43\75\1\0\1\147\4\75"+
    "\1\u0172\1\u0173\4\u0172\6\0\4\75\1\0\4\75\1\u0172"+
    "\4\75\3\0\43\75\1\0\1\147\4\75\1\u0172\1\0"+
    "\2\75\2\u0172\6\0\4\75\1\0\11\75\3\0\43\75"+
    "\1\0\1\147\5\75\1\0\1\75\2\u0172\1\75\17\0"+
    "\1\u0173\60\0\6\u0173\17\0\1\u0173\60\0\1\u0173\3\0"+
    "\2\u0173\103\0\2\u0173\7\0\16\10\4\0\26\10\1\u0174"+
    "\13\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\13\10\1\u0175\26\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\13\10\1\u0176\26\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\20\10\1\u0177\21\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\1\u0178\41\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\5\10"+
    "\1\u0179\34\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\1\u017a\41\10\2\0\5\10\1\0\4\10\6\0"+
    "\1\10\1\u017b\14\10\4\0\42\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\13\10\1\u017c\26\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\1\u017d\41\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\5\10"+
    "\1\u017e\34\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\5\10\1\u017f\34\10\2\0\5\10\1\0\4\10"+
    "\7\0\3\u016f\3\0\1\u0180\1\0\5\u016f\4\0\42\u016f"+
    "\2\0\5\u016f\1\0\4\u016f\6\0\1\75\3\74\1\0"+
    "\2\75\1\151\1\75\5\74\3\0\1\75\42\74\1\0"+
    "\1\u0181\5\74\1\0\4\74\6\0\4\75\1\0\11\75"+
    "\3\0\43\75\1\0\1\u0182\5\75\1\0\4\75\73\0"+
    "\1\u0182\20\0\16\10\4\0\13\10\1\u0183\26\10\2\0"+
    "\5\10\1\0\4\10\6\0\1\10\1\u0184\14\10\4\0"+
    "\42\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\20\10\1\u0185\21\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\1\u0186\41\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\16\10\1\u0187\23\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\40\10\1\u0188\1\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\35\10"+
    "\1\u0189\4\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\24\10\1\u018a\15\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\36\10\1\u018b\3\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\13\10\1\u018c\26\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\16\10"+
    "\1\u018d\23\10\2\0\5\10\1\0\4\10\3\0\1\345"+
    "\2\0\4\345\1\0\12\345\3\0\42\345\2\0\5\345"+
    "\1\0\4\345\6\0\16\10\4\0\20\10\1\u018e\21\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\35\10"+
    "\1\u018f\4\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\22\10\1\u0190\17\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\5\10\1\u0191\34\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\5\10\1\u0192\34\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\22\10"+
    "\1\u0193\17\10\2\0\5\10\1\0\4\10\6\0\16\10"+
    "\4\0\26\10\1\u0194\13\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\5\10\1\u0195\34\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\20\10\1\u0196\21\10"+
    "\2\0\5\10\1\0\4\10\6\0\16\10\4\0\1\u0197"+
    "\41\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\22\10\1\u0198\17\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\22\10\1\u0199\17\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\20\10\1\u019a\21\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\13\10\1\u019b"+
    "\26\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\16\10\1\u019c\23\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\7\10\1\u019d\32\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\13\10\1\u019e\26\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\20\10\1\u019f"+
    "\21\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\16\10\1\u01a0\23\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\20\10\1\u01a1\21\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\7\10\1\u01a2\32\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\2\10\1\u01a3"+
    "\37\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\20\10\1\u01a4\21\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\1\u01a5\41\10\2\0\5\10\1\0\4\10"+
    "\6\0\16\10\4\0\20\10\1\u01a6\21\10\2\0\5\10"+
    "\1\0\4\10\6\0\16\10\4\0\1\u01a7\41\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\5\10\1\u01a8"+
    "\34\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\2\10\1\u01a9\37\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\22\10\1\u01aa\17\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\16\10\1\u01ab\23\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\22\10\1\u01ac"+
    "\17\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\13\10\1\u01ad\26\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\22\10\1\u01ae\17\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\5\10\1\u01af\34\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\20\10\1\u01b0"+
    "\21\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\20\10\1\u01b1\21\10\2\0\5\10\1\0\4\10\6\0"+
    "\16\10\4\0\13\10\1\u01b2\26\10\2\0\5\10\1\0"+
    "\4\10\6\0\16\10\4\0\2\10\1\u01b3\37\10\2\0"+
    "\5\10\1\0\4\10\6\0\16\10\4\0\20\10\1\u01b4"+
    "\21\10\2\0\5\10\1\0\4\10\6\0\16\10\4\0"+
    "\22\10\1\u01b5\17\10\2\0\5\10\1\0\4\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26670];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\1\1\1\11\2\1\2\11\24\1\1\0"+
    "\31\1\20\0\1\1\1\0\32\1\1\0\1\11\3\0"+
    "\1\11\15\0\1\1\1\11\32\1\1\11\17\0\34\1"+
    "\17\0\25\1\11\0\1\11\6\0\21\1\1\11\7\0"+
    "\1\11\6\0\21\1\2\0\2\11\7\0\21\1\1\11"+
    "\2\0\3\11\3\0\16\1\11\0\15\1\1\0\1\11"+
    "\3\0\14\1\1\0\2\11\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    VentanaAppCliente ventana;
    
    public miLexer(java.io.Reader in, VentanaAppCliente ventana){
        this.zzReader = in;
        this.ventana = ventana;
    
    }




    private Symbol symbol(int type) {
		return new Symbol(type, yyline+1, yycolumn+1);
	}



	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline+1, yycolumn+1, value);
	}

	private void error(String message) {
		String completeMessage = "Error lexico en posición " + (yycolumn + 1) + " --- "+ (yyline + 1) + " : " + message;
		System.out.println(completeMessage);
        ventana.escribirEnTextAreaDeErroresLexicos("Error en:  \n      Linea: " + yyline + "\n     Columna: "+yycolumn+"\n      Simbolo: "+ yytext() +"");       
	}

    private String quitarCorchetes (String texto){
        
        int tamanio = texto.length(); 
        
        String textoSinCorchetes = texto.substring(1, tamanio-1);
        
        System.out.println("Texto sin corchetes: " + textoSinCorchetes);

        return textoSinCorchetes;
    
    }

    
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public miLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2620) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("*"); return symbol(error, yytext());
            }
          case 64: break;
          case 2: 
            { return symbol(MENOR_Q, yytext());
            }
          case 65: break;
          case 3: 
            { return symbol(MAYOR_Q, yytext());
            }
          case 66: break;
          case 4: 
            { return symbol(DIAGONAL, yytext());
            }
          case 67: break;
          case 5: 
            { return symbol(COMILLA, yytext());
            }
          case 68: break;
          case 6: 
            { return symbol(IGUAL, yytext());
            }
          case 69: break;
          case 7: 
            { return symbol(DATO, yytext());
            }
          case 70: break;
          case 8: 
            { /* ignoramos */
            }
          case 71: break;
          case 9: 
            { /*Ignoramos*/
            }
          case 72: break;
          case 10: 
            { return symbol(ID, yytext());
            }
          case 73: break;
          case 11: 
            { return symbol(ORACION, quitarCorchetes(yytext()));
            }
          case 74: break;
          case 12: 
            { return symbol(ENTERO, yytext());
            }
          case 75: break;
          case 13: 
            { return symbol(ID_ETIQUETA, quitarCorchetes( yytext() ) );
            }
          case 76: break;
          case 14: 
            { return symbol(IDENTIFICADOR, quitarCorchetes( yytext() ) );
            }
          case 77: break;
          case 15: 
            { return symbol(ANCHO, yytext());
            }
          case 78: break;
          case 16: 
            { return symbol(TEXTO, yytext());
            }
          case 79: break;
          case 17: 
            { return symbol(SITIO, yytext());
            }
          case 80: break;
          case 18: 
            { return symbol(COLOR, yytext());
            }
          case 81: break;
          case 19: 
            { return symbol(CLASE, yytext());
            }
          case 82: break;
          case 20: 
            { return symbol(PADRE, yytext());
            }
          case 83: break;
          case 21: 
            { return symbol(VALOR, yytext());
            }
          case 84: break;
          case 22: 
            { return symbol(ACCION, yytext());
            }
          case 85: break;
          case 23: 
            { return symbol(ALTURA, yytext());
            }
          case 86: break;
          case 24: 
            { return symbol(TITULO, yytext());
            }
          case 87: break;
          case 25: 
            { return symbol(ORIGEN, yytext());
            }
          case 88: break;
          case 26: 
            { return symbol(NOMBRE, yytext());
            }
          case 89: break;
          case 27: 
            { return symbol(PAGINA, yytext());
            }
          case 90: break;
          case 28: 
            { return symbol(MENU, quitarCorchetes( yytext() ) );
            }
          case 91: break;
          case 29: 
            { return symbol(CENTRAR, yytext());
            }
          case 92: break;
          case 30: 
            { return symbol(DERECHA, yytext());
            }
          case 93: break;
          case 31: 
            { return symbol(URL,  quitarCorchetes( yytext() ) );
            }
          case 94: break;
          case 32: 
            { return symbol(VIDEO, quitarCorchetes( yytext() ) );
            }
          case 95: break;
          case 33: 
            { return symbol(ATRIBUTO, yytext());
            }
          case 96: break;
          case 34: 
            { return symbol(ACCIONES, yytext());
            }
          case 97: break;
          case 35: 
            { return symbol(ETIQUETA, yytext());
            }
          case 98: break;
          case 36: 
            { return symbol(TITULO, quitarCorchetes( yytext() ) );
            }
          case 99: break;
          case 37: 
            { return symbol(IMAGEN, quitarCorchetes( yytext() ) );
            }
          case 100: break;
          case 38: 
            { return symbol(PARAMETRO, yytext());
            }
          case 101: break;
          case 39: 
            { return symbol(ATRIBUTOS, yytext());
            }
          case 102: break;
          case 40: 
            { return symbol(IZQUIERDA, yytext());
            }
          case 103: break;
          case 41: 
            { return symbol(ETIQUETAS, yytext());
            }
          case 104: break;
          case 42: 
            { return symbol(HEXADECIMAL, quitarCorchetes( yytext() ) );
            }
          case 105: break;
          case 43: 
            { return symbol(CENTRAR,quitarCorchetes( yytext() ) );
            }
          case 106: break;
          case 44: 
            { return symbol(PARRAFO, quitarCorchetes( yytext() ) );
            }
          case 107: break;
          case 45: 
            { return symbol(DERECHA, quitarCorchetes( yytext() ) );
            }
          case 108: break;
          case 46: 
            { return symbol(PARAMETROS, yytext());
            }
          case 109: break;
          case 47: 
            { return symbol(ALINEACION, yytext());
            }
          case 110: break;
          case 48: 
            { return symbol(JUSTIFICAR, yytext());
            }
          case 111: break;
          case 49: 
            { return symbol(IZQUIERDA, quitarCorchetes( yytext() ) );
            }
          case 112: break;
          case 50: 
            { return symbol(NUEVA_PAGINA, yytext());
            }
          case 113: break;
          case 51: 
            { return symbol(JUSTIFICAR, quitarCorchetes( yytext() ) );
            }
          case 114: break;
          case 52: 
            { return symbol(FECHA, quitarCorchetes( yytext() ) );
            }
          case 115: break;
          case 53: 
            { return symbol(BORRAR_PAGINA, yytext());
            }
          case 116: break;
          case 54: 
            { return symbol(FECHA_CREACION, yytext());
            }
          case 117: break;
          case 55: 
            { return symbol(NUEVO_SITIO_WEB, yytext());
            }
          case 118: break;
          case 56: 
            { return symbol(BORRAR_SITIO_WEB, yytext());
            }
          case 119: break;
          case 57: 
            { return symbol(USUARIO_CREACION, yytext());
            }
          case 120: break;
          case 58: 
            { return symbol(MODIFICAR_PAGINA, yytext());
            }
          case 121: break;
          case 59: 
            { return symbol(BORRAR_COMPONENTE, yytext());
            }
          case 122: break;
          case 60: 
            { return symbol(AGREGAR_COMPONENTE, yytext());
            }
          case 123: break;
          case 61: 
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          case 124: break;
          case 62: 
            { return symbol(USUARIO_MODIFICACION, yytext());
            }
          case 125: break;
          case 63: 
            { return symbol(MODIFICAR_COMPONENTE, yytext());
            }
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java miLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        miLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new miLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
